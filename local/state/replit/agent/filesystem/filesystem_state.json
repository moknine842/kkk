{"file_contents":{"design_guidelines.md":{"content":"# Secret Missions Multiplayer - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern gaming interfaces like Discord, Among Us, and party game platforms. The design emphasizes playful energy while maintaining clarity for competitive gameplay.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Dark mode primary: 220 25% 15% (deep navy background)\n- Light mode primary: 220 15% 95% (soft white)\n- Brand accent: 280 85% 65% (vibrant purple for game elements)\n- Success: 140 60% 50% (mission completion)\n- Warning: 35 85% 60% (timer alerts)\n- Danger: 0 75% 55% (eliminations)\n\n**Gaming Theme Colors:**\n- Mission cards: 260 40% 25% (dark purple backgrounds)\n- Player highlights: 190 70% 55% (cyan for active players)\n- Lobby elements: 45 25% 80% (warm beige for neutral areas)\n\n### Typography\n- **Primary**: Inter via Google Fonts for clean readability\n- **Gaming accent**: Orbitron for headers and mission titles\n- Sizes: text-sm for labels, text-base for body, text-xl for headers\n\n### Layout System\n**Spacing**: Consistent use of Tailwind units 2, 4, 6, and 8 (p-4, m-6, gap-8)\n- Cards and containers: p-6, m-4\n- Component spacing: gap-4\n- Section margins: mb-8\n\n### Component Library\n\n**Game Interface:**\n- **Mission Cards**: Gradient backgrounds (280 85% 65% to 260 40% 25%) with rounded-xl borders\n- **Player Avatars**: Circular with colored rings indicating status\n- **Timer Display**: Large, prominent with pulsing animation when under 30 seconds\n- **Lobby Interface**: Card-based layout with room codes prominently displayed\n\n**Interactive Elements:**\n- **Guess Buttons**: Primary purple with subtle hover states\n- **Mission Submit**: Green success buttons with confirmation feedback\n- **Elimination Indicators**: Red badges with cross icons\n\n**Navigation:**\n- **Game Modes**: Large card selection with icons\n- **Settings Panel**: Slide-out drawer with game configuration options\n\n### Visual Treatments\n\n**Gradients**: Subtle gradients on mission cards and lobby backgrounds\n- Mission backgrounds: vertical gradient from brand accent to darker variant\n- Lobby headers: horizontal gradient with purple and cyan tones\n\n**Background**: Dark theme primary with subtle texture overlay for depth\n\n### Gaming-Specific Elements\n\n**Status Indicators:**\n- Active mission: glowing border animation\n- Eliminated players: grayscale with strikethrough\n- Timer warnings: pulsing red overlay\n\n**Feedback Systems:**\n- Success animations: green checkmark with scale effect\n- Wrong guess: red shake animation\n- Mission completion: confetti particle effect\n\n## Images\nNo large hero image needed. Instead, use:\n- Small mission category icons (64x64px) for different mission types\n- Player avatar placeholders (80x80px circular)\n- Game mode illustration cards (200x120px) showing local vs online play\n- Achievement badges (40x40px) for player progression\n\n## Key Design Principles\n1. **Clarity First**: All game state information must be immediately readable\n2. **Retro-Futuristic Energy**: Smooth, fluid animations with glowing effects and seamless transitions enhance the gaming atmosphere\n3. **Mobile Optimized**: Touch-friendly sizing with minimum 44px tap targets\n4. **Quick Recognition**: Color coding for different player states and mission types\n5. **Immersive Animations**: All transitions should feel smooth and maintain the retro-futuristic vibe with subtle glow effects, smooth slides, and elegant fades\n\n## Animation Guidelines\n- **Page Transitions**: Smooth slide and fade transitions between game states\n- **Component Entry**: Elements should animate in with subtle glow and scale effects\n- **Interactive Feedback**: Buttons and cards should have smooth hover states with gentle pulse effects\n- **Mission Reveals**: Special animation sequences for mission discovery with retro-style reveals\n- **Timer Warnings**: Pulsing glow effects that intensify as time runs low\n- **Player Turn Indicators**: Smooth highlighting and focus transitions for local mode turn management","size_bytes":4028},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Secret Missions Multiplayer\n\n## Overview\n\nSecret Missions Multiplayer is a social party game built as a modern web application where players complete secret missions while trying to identify other players' missions. The game supports both local (shared device) and online multiplayer modes, designed for 4+ players per session. Players receive hidden objectives that must be completed discretely while simultaneously attempting to guess other participants' missions to eliminate them from the game.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Build System**: Vite for fast development and optimized production builds\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom gaming theme variables and dark/light mode support\n- **State Management**: TanStack Query for server state management, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Animations**: Framer Motion for smooth transitions and gaming feel\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js for RESTful API endpoints\n- **Type Safety**: TypeScript throughout the entire stack with shared types\n- **Build Process**: ESBuild for server bundling with external package handling\n- **Development**: Hot module replacement and runtime error overlays for development efficiency\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon Database serverless PostgreSQL for cloud deployment\n- **Session Storage**: Connect-pg-simple for PostgreSQL-backed session management\n- **Schema**: Shared type definitions between client and server using Drizzle-Zod\n\n### Design System\n- **Component Library**: Custom components following gaming UI patterns inspired by Discord and Among Us\n- **Color Palette**: Gaming-focused theme with vibrant purple accents, dark navy backgrounds, and status-specific colors\n- **Typography**: Inter for readability with Orbitron accent font for gaming headers\n- **Layout**: Card-based interfaces with consistent spacing using Tailwind utilities\n- **Responsive**: Mobile-first design with adaptive layouts for various screen sizes\n\n### Game Logic Architecture\n- **Game States**: Centralized state management for game phases (mode selection, online flow selection, lobby creation/joining, gameplay, results)\n- **Online Mode Flow**: Two-step process - first select create or join, then proceed to respective screens\n- **Real-time Features**: Prepared for WebSocket integration for live multiplayer functionality\n- **Mission System**: Modular mission assignment with difficulty levels and categories\n- **Timer Management**: Configurable game timers with warning thresholds and visual feedback\n- **Player Management**: Comprehensive player status tracking (active, eliminated, completed, host)\n- **Avatar System**: Full avatar customization for online mode with 4 options (upload, camera, custom builder, initials), available before create/join and editable in lobby\n\n## External Dependencies\n\n### UI and Styling\n- **@radix-ui/react-***: Comprehensive accessible component primitives for complex UI elements\n- **tailwindcss**: Utility-first CSS framework with custom gaming theme configuration\n- **class-variance-authority**: Type-safe variant API for component styling\n- **framer-motion**: Animation library for smooth transitions and gaming effects\n\n### Database and Backend\n- **@neondatabase/serverless**: Serverless PostgreSQL driver optimized for edge deployments\n- **drizzle-orm**: Type-safe ORM with PostgreSQL dialect support\n- **drizzle-zod**: Schema validation bridge between Drizzle and Zod\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### Development Tools\n- **@tanstack/react-query**: Powerful data synchronization for server state management\n- **@hookform/resolvers**: Form validation with React Hook Form integration\n- **react-hook-form**: Performant forms with minimal re-renders\n- **zod**: Runtime type validation for API endpoints and form schemas\n\n### Game-Specific Libraries\n- **date-fns**: Date manipulation for game timers and session management\n- **lucide-react**: Consistent icon library for gaming UI elements\n- **embla-carousel-react**: Touch-friendly carousels for game mode selection\n- **cmdk**: Command palette component for quick actions\n\n### Development Infrastructure\n- **@replit/vite-plugin-***: Replit-specific development tools for error handling and debugging\n- **tsx**: TypeScript execution for development server\n- **nanoid**: Secure unique ID generation for game sessions and players\n\n## Recent Changes\n\n### October 7, 2025 - Complete Multiplayer Implementation\n- ✅ **Database Schema**: Created tables for games, players, and missions with proper relationships\n  - Games table: 6-digit room codes, timer management, game status tracking\n  - Players table: avatars, lives (3 per player), points, elimination status, host flag\n  - Missions table: mission text, assignment tracking, reveal status\n- ✅ **Backend API & WebSocket Server**:\n  - POST `/api/games/create` - Create game room with 6-digit code\n  - POST `/api/games/join` - Join existing game with room code\n  - GET `/api/games/:gameId` - Get game state with all players and missions\n  - POST `/api/missions/submit` - Submit missions with automatic shuffle & redistribution\n  - POST `/api/players/:playerId/action` - Host controls (eliminate, subtract life, mission completed)\n  - POST `/api/games/:gameId/end` - End game and show results\n  - WebSocket path `/ws` for real-time multiplayer synchronization\n- ✅ **Mission Distribution System**: Shuffle algorithm ensures players never get their own missions\n- ✅ **Online Game Flow**:\n  - Create lobby with 6-digit room code, player name, and avatar selection\n  - Join lobby using room code from any device\n  - Real-time player list updates via WebSocket\n  - Mission entry interface with tips and character counter\n  - Automatic game start when all missions submitted\n- ✅ **Gameplay Features**:\n  - Timer countdown with visual warnings\n  - Hidden missions with reveal button (local mode privacy)\n  - Host control panel for player actions\n  - Eliminate player with guesser selection popup\n  - Subtract life (auto-eliminate at 0 lives)\n  - Award mission completed points\n  - Real-time game state synchronization\n- ✅ **Game End Conditions**:\n  - Timer expires OR all but one player eliminated\n  - Results screen with player rankings by points\n  - Visual indicators for 1st/2nd/3rd place (gold/silver/bronze)\n- ✅ **Routing**: All pages integrated (/, /online/create, /online/join, /game/:id/missions, /game/:id/play, /game/:id/results)\n- ✅ **WebSocket Integration**: Custom React hook for real-time game events\n\n### October 7, 2025 - GitHub Import & Replit Environment Setup\n- ✅ Successfully imported GitHub repository to Replit\n- ✅ Installed all project dependencies via npm (479 packages)\n- ✅ Configured PostgreSQL database connection using existing DATABASE_URL secret\n- ✅ Pushed database schema to PostgreSQL using Drizzle Kit (games, players, missions tables)\n- ✅ Vite configuration already properly set up for Replit proxy (host: 0.0.0.0, allowedHosts: true)\n- ✅ Set up development workflow to run on port 5000 with webview output\n- ✅ Configured deployment settings for production (autoscale target, build + start scripts)\n- ✅ Verified application is fully functional - home page loads with Local/Online mode selection\n- ✅ WebSocket server running on /ws path for real-time multiplayer\n- ✅ All game routes accessible and working\n\n## Replit Configuration\n\n### Development Environment\n- **Port**: 5000 (frontend and backend served together)\n- **Host**: 0.0.0.0 for frontend server\n- **Database**: PostgreSQL (Helium) with connection via DATABASE_URL\n- **Workflow**: `npm run dev` - runs Express server with Vite HMR integration\n\n### Deployment Configuration\n- **Target**: Autoscale (stateless web application)\n- **Build**: `npm run build` - builds both frontend and backend\n- **Run**: `npm run start` - runs production server on port 5000\n\n### Database Schema\n- **Users table**: Stores user authentication data with UUID primary keys\n- Schema managed through Drizzle ORM with type-safe operations\n- Currently using in-memory storage (MemStorage) as default, ready for PostgreSQL integration","size_bytes":8552},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        // Gaming theme colors\n        gaming: {\n          \"mission-card\": \"hsl(260 40% 25%)\",\n          \"player-highlight\": \"hsl(190 70% 55%)\",\n          \"lobby-element\": \"hsl(45 25% 80%)\",\n          \"success\": \"hsl(140 60% 50%)\",\n          \"warning\": \"hsl(35 85% 60%)\",\n          \"danger\": \"hsl(0 75% 55%)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        gaming: [\"Orbitron\", \"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4433},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    hmr: {\n      clientPort: 443,\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1142},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport type { InsertGame, InsertPlayer, InsertMission } from \"@shared/schema\";\n\nfunction generateRoomCode(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ \n    server: httpServer,\n    path: \"/ws\"\n  });\n\n  // WebSocket connection map\n  const connections = new Map<string, WebSocket>();\n\n  // Broadcast to all players in a game\n  async function broadcastToGame(gameId: string, event: string, data: any) {\n    const gamePlayers = await storage.getPlayersByGameId(gameId);\n    gamePlayers.forEach((player) => {\n      if (player.socketId && connections.has(player.socketId)) {\n        const ws = connections.get(player.socketId);\n        if (ws && ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({ event, data }));\n        }\n      }\n    });\n  }\n\n  // WebSocket handlers\n  wss.on(\"connection\", (ws: WebSocket) => {\n    const socketId = Math.random().toString(36).substring(7);\n    connections.set(socketId, ws);\n\n    ws.on(\"message\", async (message: string) => {\n      try {\n        const { event, data } = JSON.parse(message.toString());\n\n        switch (event) {\n          case \"register_player\":\n            if (data.playerId) {\n              await storage.updatePlayerSocketId(data.playerId, socketId);\n            }\n            break;\n\n          case \"player_ready\":\n            await broadcastToGame(data.gameId, \"player_ready\", { playerId: data.playerId });\n            break;\n\n          case \"game_update\":\n            await broadcastToGame(data.gameId, \"game_update\", data);\n            break;\n        }\n      } catch (error) {\n        console.error(\"WebSocket error:\", error);\n      }\n    });\n\n    ws.on(\"close\", () => {\n      connections.delete(socketId);\n    });\n\n    ws.send(JSON.stringify({ event: \"connected\", socketId }));\n  });\n\n  // API Routes\n\n  // Create a new game room\n  app.post(\"/api/games/create\", async (req, res) => {\n    try {\n      const { mode, hostName, hostAvatar, timerDuration } = req.body;\n      \n      const roomCode = generateRoomCode();\n      \n      const game: InsertGame = {\n        roomCode,\n        mode,\n        timerDuration: timerDuration || 30,\n      };\n      \n      const createdGame = await storage.createGame(game);\n      \n      // Create host player\n      const hostPlayer: InsertPlayer = {\n        gameId: createdGame.id,\n        name: hostName,\n        avatar: hostAvatar,\n        isHost: true,\n      };\n      \n      const host = await storage.createPlayer(hostPlayer);\n      \n      res.json({ \n        game: createdGame, \n        player: host,\n        roomCode: createdGame.roomCode \n      });\n    } catch (error) {\n      console.error(\"Create game error:\", error);\n      res.status(500).json({ error: \"Failed to create game\" });\n    }\n  });\n\n  // Join an existing game room\n  app.post(\"/api/games/join\", async (req, res) => {\n    try {\n      const { roomCode, playerName, playerAvatar } = req.body;\n      \n      const game = await storage.getGameByRoomCode(roomCode);\n      \n      if (!game) {\n        return res.status(404).json({ error: \"Game not found\" });\n      }\n      \n      if (game.status !== \"lobby\") {\n        return res.status(400).json({ error: \"Game already started\" });\n      }\n      \n      const player: InsertPlayer = {\n        gameId: game.id,\n        name: playerName,\n        avatar: playerAvatar,\n        isHost: false,\n      };\n      \n      const createdPlayer = await storage.createPlayer(player);\n      \n      // Notify all players in the game\n      await broadcastToGame(game.id, \"player_joined\", { \n        player: createdPlayer,\n        game \n      });\n      \n      res.json({ game, player: createdPlayer });\n    } catch (error) {\n      console.error(\"Join game error:\", error);\n      res.status(500).json({ error: \"Failed to join game\" });\n    }\n  });\n\n  // Get game state\n  app.get(\"/api/games/:gameId\", async (req, res) => {\n    try {\n      const game = await storage.getGame(req.params.gameId);\n      if (!game) {\n        return res.status(404).json({ error: \"Game not found\" });\n      }\n      \n      const gamePlayers = await storage.getPlayersByGameId(game.id);\n      const gameMissions = await storage.getMissionsByGameId(game.id);\n      \n      res.json({ game, players: gamePlayers, missions: gameMissions });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get game\" });\n    }\n  });\n\n  // Submit mission\n  app.post(\"/api/missions/submit\", async (req, res) => {\n    try {\n      const { gameId, playerId, missionText } = req.body;\n      \n      const mission: InsertMission = {\n        gameId,\n        enteredBy: playerId,\n        missionText,\n      };\n      \n      const createdMission = await storage.createMission(mission);\n      \n      // Check if all players have submitted missions\n      const gamePlayers = await storage.getPlayersByGameId(gameId);\n      const gameMissions = await storage.getMissionsByGameId(gameId);\n      \n      if (gameMissions.length === gamePlayers.length) {\n        // All missions submitted - shuffle and distribute\n        const shuffledMissions = shuffleArray(gameMissions);\n        \n        // Assign missions ensuring no player gets their own\n        const assignments = [];\n        for (let i = 0; i < gamePlayers.length; i++) {\n          let missionIndex = i;\n          \n          // Find a mission that wasn't entered by this player\n          for (let j = 0; j < shuffledMissions.length; j++) {\n            const testIndex = (i + j) % shuffledMissions.length;\n            if (shuffledMissions[testIndex].enteredBy !== gamePlayers[i].id) {\n              missionIndex = testIndex;\n              break;\n            }\n          }\n          \n          await storage.assignMission(shuffledMissions[missionIndex].id, gamePlayers[i].id);\n          assignments.push({\n            playerId: gamePlayers[i].id,\n            missionId: shuffledMissions[missionIndex].id,\n          });\n        }\n        \n        // Start the game\n        await storage.startGameTimer(gameId);\n        \n        // Notify all players\n        await broadcastToGame(gameId, \"missions_distributed\", { assignments });\n      }\n      \n      res.json({ mission: createdMission });\n    } catch (error) {\n      console.error(\"Submit mission error:\", error);\n      res.status(500).json({ error: \"Failed to submit mission\" });\n    }\n  });\n\n  // Get player's assigned mission\n  app.get(\"/api/missions/player/:playerId\", async (req, res) => {\n    try {\n      const mission = await storage.getPlayerMission(req.params.playerId);\n      res.json({ mission });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get mission\" });\n    }\n  });\n\n  // Update player (eliminate, subtract life, add points, mission completed)\n  app.post(\"/api/players/:playerId/action\", async (req, res) => {\n    try {\n      const { playerId } = req.params;\n      const { action, value, guessingPlayerId } = req.body;\n      \n      const player = await storage.getPlayer(playerId);\n      if (!player) {\n        return res.status(404).json({ error: \"Player not found\" });\n      }\n      \n      switch (action) {\n        case \"eliminate\":\n          await storage.eliminatePlayer(playerId);\n          \n          // Award point to guessing player if provided\n          if (guessingPlayerId) {\n            const guesser = await storage.getPlayer(guessingPlayerId);\n            if (guesser) {\n              await storage.updatePlayerPoints(guessingPlayerId, guesser.points + 1);\n            }\n          }\n          \n          // Reveal the mission\n          const mission = await storage.getPlayerMission(playerId);\n          if (mission) {\n            await storage.revealMission(mission.id);\n          }\n          break;\n          \n        case \"subtract_life\":\n          const newLives = Math.max(0, player.lives - 1);\n          await storage.updatePlayerLives(playerId, newLives);\n          \n          // Auto-eliminate if no lives left\n          if (newLives === 0) {\n            await storage.eliminatePlayer(playerId);\n          }\n          break;\n          \n        case \"add_point\":\n          await storage.updatePlayerPoints(playerId, player.points + 1);\n          break;\n          \n        case \"mission_completed\":\n          await storage.markMissionCompleted(playerId);\n          await storage.updatePlayerPoints(playerId, player.points + 1);\n          break;\n      }\n      \n      // Broadcast update to all players in the game\n      const updatedPlayer = await storage.getPlayer(playerId);\n      await broadcastToGame(player.gameId, \"player_updated\", { player: updatedPlayer });\n      \n      // Check for game end conditions\n      const gamePlayers = await storage.getPlayersByGameId(player.gameId);\n      const activePlayers = gamePlayers.filter(p => !p.isEliminated);\n      \n      if (activePlayers.length <= 1) {\n        await storage.updateGameStatus(player.gameId, \"finished\");\n        await broadcastToGame(player.gameId, \"game_ended\", { players: gamePlayers });\n      }\n      \n      res.json({ player: updatedPlayer });\n    } catch (error) {\n      console.error(\"Player action error:\", error);\n      res.status(500).json({ error: \"Failed to update player\" });\n    }\n  });\n\n  // End game manually\n  app.post(\"/api/games/:gameId/end\", async (req, res) => {\n    try {\n      await storage.updateGameStatus(req.params.gameId, \"finished\");\n      const gamePlayers = await storage.getPlayersByGameId(req.params.gameId);\n      \n      await broadcastToGame(req.params.gameId, \"game_ended\", { players: gamePlayers });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to end game\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":10204},"server/storage.ts":{"content":"import { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { eq, and } from \"drizzle-orm\";\nimport { \n  type User, \n  type InsertUser, \n  type Game, \n  type InsertGame,\n  type Player,\n  type InsertPlayer,\n  type Mission,\n  type InsertMission,\n  users, \n  games, \n  players, \n  missions \n} from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql);\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Game operations\n  createGame(game: InsertGame): Promise<Game>;\n  getGameByRoomCode(roomCode: string): Promise<Game | undefined>;\n  getGame(id: string): Promise<Game | undefined>;\n  updateGameStatus(id: string, status: string): Promise<void>;\n  startGameTimer(id: string): Promise<void>;\n  \n  // Player operations\n  createPlayer(player: InsertPlayer): Promise<Player>;\n  getPlayer(id: string): Promise<Player | undefined>;\n  getPlayersByGameId(gameId: string): Promise<Player[]>;\n  updatePlayerSocketId(id: string, socketId: string): Promise<void>;\n  updatePlayerLives(id: string, lives: number): Promise<void>;\n  updatePlayerPoints(id: string, points: number): Promise<void>;\n  eliminatePlayer(id: string): Promise<void>;\n  markMissionCompleted(id: string): Promise<void>;\n  \n  // Mission operations\n  createMission(mission: InsertMission): Promise<Mission>;\n  getMissionsByGameId(gameId: string): Promise<Mission[]>;\n  assignMission(missionId: string, playerId: string): Promise<void>;\n  revealMission(missionId: string): Promise<void>;\n  getPlayerMission(playerId: string): Promise<Mission | undefined>;\n}\n\nexport class DBStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  // Game operations\n  async createGame(game: InsertGame): Promise<Game> {\n    const result = await db.insert(games).values(game).returning();\n    return result[0];\n  }\n\n  async getGameByRoomCode(roomCode: string): Promise<Game | undefined> {\n    const result = await db.select().from(games).where(eq(games.roomCode, roomCode)).limit(1);\n    return result[0];\n  }\n\n  async getGame(id: string): Promise<Game | undefined> {\n    const result = await db.select().from(games).where(eq(games.id, id)).limit(1);\n    return result[0];\n  }\n\n  async updateGameStatus(id: string, status: string): Promise<void> {\n    await db.update(games).set({ status }).where(eq(games.id, id));\n  }\n\n  async startGameTimer(id: string): Promise<void> {\n    await db.update(games).set({ \n      timerStartedAt: new Date(),\n      status: \"playing\"\n    }).where(eq(games.id, id));\n  }\n\n  // Player operations\n  async createPlayer(player: InsertPlayer): Promise<Player> {\n    const result = await db.insert(players).values(player).returning();\n    return result[0];\n  }\n\n  async getPlayer(id: string): Promise<Player | undefined> {\n    const result = await db.select().from(players).where(eq(players.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getPlayersByGameId(gameId: string): Promise<Player[]> {\n    return await db.select().from(players).where(eq(players.gameId, gameId));\n  }\n\n  async updatePlayerSocketId(id: string, socketId: string): Promise<void> {\n    await db.update(players).set({ socketId }).where(eq(players.id, id));\n  }\n\n  async updatePlayerLives(id: string, lives: number): Promise<void> {\n    await db.update(players).set({ lives }).where(eq(players.id, id));\n  }\n\n  async updatePlayerPoints(id: string, points: number): Promise<void> {\n    await db.update(players).set({ points }).where(eq(players.id, id));\n  }\n\n  async eliminatePlayer(id: string): Promise<void> {\n    await db.update(players).set({ isEliminated: true }).where(eq(players.id, id));\n  }\n\n  async markMissionCompleted(id: string): Promise<void> {\n    await db.update(players).set({ missionCompleted: true }).where(eq(players.id, id));\n  }\n\n  // Mission operations\n  async createMission(mission: InsertMission): Promise<Mission> {\n    const result = await db.insert(missions).values(mission).returning();\n    return result[0];\n  }\n\n  async getMissionsByGameId(gameId: string): Promise<Mission[]> {\n    return await db.select().from(missions).where(eq(missions.gameId, gameId));\n  }\n\n  async assignMission(missionId: string, playerId: string): Promise<void> {\n    await db.update(missions).set({ assignedTo: playerId }).where(eq(missions.id, missionId));\n  }\n\n  async revealMission(missionId: string): Promise<void> {\n    await db.update(missions).set({ isRevealed: true }).where(eq(missions.id, missionId));\n  }\n\n  async getPlayerMission(playerId: string): Promise<Mission | undefined> {\n    const result = await db.select().from(missions)\n      .where(eq(missions.assignedTo, playerId))\n      .limit(1);\n    return result[0];\n  }\n}\n\nexport const storage = new DBStorage();\n","size_bytes":5476},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const games = pgTable(\"games\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomCode: varchar(\"room_code\", { length: 6 }).notNull().unique(),\n  mode: text(\"mode\").notNull(),\n  status: text(\"status\").notNull().default(\"lobby\"),\n  hostId: varchar(\"host_id\"),\n  timerDuration: integer(\"timer_duration\").default(30),\n  timerStartedAt: timestamp(\"timer_started_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const players = pgTable(\"players\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  avatar: text(\"avatar\"),\n  socketId: text(\"socket_id\"),\n  lives: integer(\"lives\").default(3).notNull(),\n  points: integer(\"points\").default(0).notNull(),\n  isHost: boolean(\"is_host\").default(false).notNull(),\n  isEliminated: boolean(\"is_eliminated\").default(false).notNull(),\n  missionCompleted: boolean(\"mission_completed\").default(false).notNull(),\n  joinedAt: timestamp(\"joined_at\").defaultNow().notNull(),\n});\n\nexport const missions = pgTable(\"missions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id, { onDelete: \"cascade\" }),\n  enteredBy: varchar(\"entered_by\").notNull().references(() => players.id, { onDelete: \"cascade\" }),\n  assignedTo: varchar(\"assigned_to\").references(() => players.id, { onDelete: \"cascade\" }),\n  missionText: text(\"mission_text\").notNull(),\n  isRevealed: boolean(\"is_revealed\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport type Game = typeof games.$inferSelect;\nexport type InsertGame = typeof games.$inferInsert;\nexport type Player = typeof players.$inferSelect;\nexport type InsertPlayer = typeof players.$inferInsert;\nexport type Mission = typeof missions.$inferSelect;\nexport type InsertMission = typeof missions.$inferInsert;\n","size_bytes":2610},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport ComponentShowcase from \"@/pages/ComponentShowcase\";\nimport NotFound from \"@/pages/not-found\";\nimport { OnlineGameLobby } from \"@/pages/OnlineGame\";\nimport { JoinGame } from \"@/pages/JoinGame\";\nimport { MissionEntry } from \"@/pages/MissionEntry\";\nimport { GamePlay } from \"@/pages/GamePlay\";\nimport { GameResults } from \"@/pages/GameResults\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/online/create\" component={OnlineGameLobby} />\n      <Route path=\"/online/join\" component={JoinGame} />\n      <Route path=\"/game/:gameId/missions\" component={MissionEntry} />\n      <Route path=\"/game/:gameId/play\" component={GamePlay} />\n      <Route path=\"/game/:gameId/results\" component={GameResults} />\n      <Route path=\"/showcase\" component={ComponentShowcase} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1480},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 15% 95%;\n\n  --foreground: 220 15% 15%;\n\n  --border: 220 15% 88%;\n\n  --card: 220 15% 92%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 220 15% 85%;\n\n  --sidebar: 220 15% 89%;\n\n  --sidebar-foreground: 220 15% 15%;\n\n  --sidebar-border: 220 15% 82%;\n\n  --sidebar-primary: 280 85% 65%;\n\n  --sidebar-primary-foreground: 280 85% 15%;\n\n  --sidebar-accent: 220 15% 86%;\n\n  --sidebar-accent-foreground: 220 15% 15%;\n\n  --sidebar-ring: 280 85% 65%;\n\n  --popover: 220 15% 88%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 220 15% 80%;\n\n  --primary: 280 85% 65%;\n\n  --primary-foreground: 280 85% 15%;\n\n  --secondary: 220 15% 85%;\n\n  --secondary-foreground: 220 15% 15%;\n\n  --muted: 220 10% 84%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 190 20% 85%;\n\n  --accent-foreground: 190 20% 25%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 75% 95%;\n\n  --input: 220 15% 75%;\n  --ring: 280 85% 65%;\n  --chart-1: 280 85% 35%;\n  --chart-2: 190 70% 35%;\n  --chart-3: 140 60% 35%;\n  --chart-4: 35 85% 45%;\n  --chart-5: 260 40% 35%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 0% / 0.03);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 0% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 0% / 0.03), 0px 1px 2px -1px hsl(220 15% 0% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 0% / 0.03), 0px 1px 2px -1px hsl(220 15% 0% / 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 0% / 0.03), 0px 2px 4px -1px hsl(220 15% 0% / 0.08);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 0% / 0.03), 0px 4px 6px -1px hsl(220 15% 0% / 0.10);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 0% / 0.03), 0px 8px 10px -1px hsl(220 15% 0% / 0.12);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 0% / 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 25% 15%;\n\n  --foreground: 220 25% 85%;\n\n  --border: 220 25% 22%;\n\n  --card: 220 25% 18%;\n\n  --card-foreground: 220 25% 85%;\n\n  --card-border: 220 25% 25%;\n\n  --sidebar: 220 25% 13%;\n\n  --sidebar-foreground: 220 25% 85%;\n\n  --sidebar-border: 220 25% 20%;\n\n  --sidebar-primary: 280 85% 65%;\n\n  --sidebar-primary-foreground: 280 85% 15%;\n\n  --sidebar-accent: 220 25% 20%;\n\n  --sidebar-accent-foreground: 220 25% 85%;\n\n  --sidebar-ring: 280 85% 65%;\n\n  --popover: 220 25% 20%;\n\n  --popover-foreground: 220 25% 85%;\n\n  --popover-border: 220 25% 28%;\n\n  --primary: 280 85% 65%;\n\n  --primary-foreground: 280 85% 15%;\n\n  --secondary: 220 25% 25%;\n\n  --secondary-foreground: 220 25% 85%;\n\n  --muted: 220 10% 22%;\n\n  --muted-foreground: 220 10% 65%;\n\n  --accent: 190 20% 22%;\n\n  --accent-foreground: 190 20% 75%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 75% 95%;\n\n  --input: 220 25% 35%;\n  --ring: 280 85% 65%;\n  --chart-1: 280 85% 75%;\n  --chart-2: 190 70% 65%;\n  --chart-3: 140 60% 65%;\n  --chart-4: 35 85% 70%;\n  --chart-5: 260 40% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 25% 0% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 25% 0% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 25% 0% / 0.20), 0px 1px 2px -1px hsl(220 25% 0% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(220 25% 0% / 0.20), 0px 1px 2px -1px hsl(220 25% 0% / 0.25);\n  --shadow-md: 0px 2px 0px 0px hsl(220 25% 0% / 0.20), 0px 2px 4px -1px hsl(220 25% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 25% 0% / 0.20), 0px 4px 6px -1px hsl(220 25% 0% / 0.35);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 25% 0% / 0.20), 0px 8px 10px -1px hsl(220 25% 0% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 25% 0% / 0.25);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9843},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AvatarSelector.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Upload, \n  Camera, \n  Palette, \n  User, \n  Check,\n  X \n} from \"lucide-react\";\nimport CustomAvatarBuilder from \"./CustomAvatarBuilder\";\nimport { \n  type AvatarConfig, \n  type CustomAvatarData,\n  generateInitials,\n  SKIN_COLORS,\n  FACE_OPTIONS,\n  ACCESSORY_OPTIONS\n} from \"@/lib/avatarData\";\n\ninterface AvatarSelectorProps {\n  playerName: string;\n  currentAvatar: AvatarConfig;\n  onAvatarChange: (avatar: AvatarConfig) => void;\n  onClose: () => void;\n}\n\nexport default function AvatarSelector({ \n  playerName, \n  currentAvatar, \n  onAvatarChange,\n  onClose \n}: AvatarSelectorProps) {\n  const [selectedType, setSelectedType] = useState<'main' | 'custom'>('main');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const cameraInputRef = useRef<HTMLInputElement>(null);\n\n  const handleUploadClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        onAvatarChange({\n          type: 'upload',\n          imageUrl: reader.result as string,\n        });\n        onClose();\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleCameraClick = () => {\n    cameraInputRef.current?.click();\n  };\n\n  const handleCameraCapture = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        onAvatarChange({\n          type: 'camera',\n          imageUrl: reader.result as string,\n        });\n        onClose();\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleCustomizeClick = () => {\n    setSelectedType('custom');\n  };\n\n  const handleCustomSave = (customData: CustomAvatarData) => {\n    onAvatarChange({\n      type: 'custom',\n      customData,\n    });\n    onClose();\n  };\n\n  const handleInitialsClick = () => {\n    onAvatarChange({\n      type: 'initials',\n      initials: generateInitials(playerName),\n    });\n    onClose();\n  };\n\n  const renderCustomAvatar = (data?: CustomAvatarData) => {\n    if (!data) return null;\n    const face = FACE_OPTIONS.find(f => f.id === data.face);\n    const skinColor = SKIN_COLORS.find(c => c.id === data.skinColor);\n    const accessories = data.accessories\n      .map(id => ACCESSORY_OPTIONS.find(a => a.id === id)?.emoji)\n      .filter(Boolean)\n      .join(' ');\n\n    return (\n      <div \n        className=\"w-12 h-12 rounded-full flex items-center justify-center text-2xl relative\"\n        style={{ backgroundColor: skinColor?.color }}\n      >\n        <span>{face?.emoji}</span>\n        {accessories && (\n          <div className=\"absolute -top-1 -right-1 text-sm\">\n            {accessories}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const getCurrentAvatarPreview = () => {\n    if (currentAvatar.type === 'upload' || currentAvatar.type === 'camera') {\n      return (\n        <Avatar className=\"w-20 h-20\">\n          <AvatarImage src={currentAvatar.imageUrl} />\n          <AvatarFallback>{currentAvatar.initials || generateInitials(playerName)}</AvatarFallback>\n        </Avatar>\n      );\n    } else if (currentAvatar.type === 'custom' && currentAvatar.customData) {\n      return (\n        <div className=\"scale-150\">\n          {renderCustomAvatar(currentAvatar.customData)}\n        </div>\n      );\n    } else {\n      return (\n        <Avatar className=\"w-20 h-20\">\n          <AvatarFallback className=\"bg-primary/20 text-primary text-2xl font-bold\">\n            {currentAvatar.initials || generateInitials(playerName)}\n          </AvatarFallback>\n        </Avatar>\n      );\n    }\n  };\n\n  const avatarOptions = [\n    {\n      id: 'upload',\n      title: 'Upload Photo',\n      description: 'Choose from your gallery',\n      icon: Upload,\n      color: 'text-blue-500',\n      onClick: handleUploadClick,\n    },\n    {\n      id: 'camera',\n      title: 'Take Photo',\n      description: 'Use your camera',\n      icon: Camera,\n      color: 'text-green-500',\n      onClick: handleCameraClick,\n    },\n    {\n      id: 'customize',\n      title: 'Customize Avatar',\n      description: 'Build your character',\n      icon: Palette,\n      color: 'text-purple-500',\n      onClick: handleCustomizeClick,\n    },\n    {\n      id: 'initials',\n      title: 'Use Initials',\n      description: 'Simple default avatar',\n      icon: User,\n      color: 'text-orange-500',\n      onClick: handleInitialsClick,\n    },\n  ];\n\n  return (\n    <Dialog open onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>Customize Your Avatar</span>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <AnimatePresence mode=\"wait\">\n          {selectedType === 'main' ? (\n            <motion.div\n              key=\"main\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              className=\"space-y-6\"\n            >\n              {/* Current Avatar Preview */}\n              <div className=\"flex flex-col items-center gap-3 p-4 bg-muted/50 rounded-lg\">\n                <div className=\"relative\">\n                  {getCurrentAvatarPreview()}\n                  {currentAvatar.type !== 'initials' && (\n                    <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-gaming-success rounded-full flex items-center justify-center\">\n                      <Check className=\"w-3 h-3 text-white\" />\n                    </div>\n                  )}\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"font-semibold\">{playerName}</p>\n                  <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                    {currentAvatar.type === 'initials' ? 'Default' : \n                     currentAvatar.type === 'upload' ? 'Uploaded' :\n                     currentAvatar.type === 'camera' ? 'Camera' : 'Custom'}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Avatar Options */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                {avatarOptions.map((option) => (\n                  <motion.div\n                    key={option.id}\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Card \n                      className=\"cursor-pointer hover-elevate transition-all\"\n                      onClick={option.onClick}\n                    >\n                      <CardContent className=\"p-6 flex flex-col items-center text-center space-y-3\">\n                        <div className={`w-12 h-12 rounded-full bg-muted flex items-center justify-center ${option.color}`}>\n                          <option.icon className=\"w-6 h-6\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{option.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{option.description}</p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </div>\n\n              {/* Hidden file inputs */}\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileUpload}\n                className=\"hidden\"\n              />\n              <input\n                ref={cameraInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                capture=\"user\"\n                onChange={handleCameraCapture}\n                className=\"hidden\"\n              />\n            </motion.div>\n          ) : (\n            <motion.div\n              key=\"custom\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <CustomAvatarBuilder\n                onSave={handleCustomSave}\n                onCancel={() => setSelectedType('main')}\n                initialData={currentAvatar.customData}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8944},"client/src/components/CustomAvatarBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Palette, Sparkles } from \"lucide-react\";\nimport { \n  FACE_OPTIONS, \n  SKIN_COLORS, \n  ACCESSORY_OPTIONS,\n  type CustomAvatarData \n} from \"@/lib/avatarData\";\n\ninterface CustomAvatarBuilderProps {\n  onSave: (avatarData: CustomAvatarData) => void;\n  onCancel: () => void;\n  initialData?: CustomAvatarData;\n}\n\nexport default function CustomAvatarBuilder({ \n  onSave, \n  onCancel, \n  initialData \n}: CustomAvatarBuilderProps) {\n  const [selectedFace, setSelectedFace] = useState(\n    initialData?.face || FACE_OPTIONS[0].id\n  );\n  const [selectedSkinColor, setSelectedSkinColor] = useState(\n    initialData?.skinColor || SKIN_COLORS[2].id\n  );\n  const [selectedAccessories, setSelectedAccessories] = useState<string[]>(\n    initialData?.accessories || []\n  );\n\n  const toggleAccessory = (accessoryId: string) => {\n    if (accessoryId === 'none') {\n      setSelectedAccessories([]);\n      return;\n    }\n    \n    setSelectedAccessories(prev => \n      prev.includes(accessoryId)\n        ? prev.filter(id => id !== accessoryId)\n        : [...prev, accessoryId]\n    );\n  };\n\n  const handleSave = () => {\n    onSave({\n      face: selectedFace,\n      skinColor: selectedSkinColor,\n      accessories: selectedAccessories,\n    });\n  };\n\n  const getCurrentFace = () => FACE_OPTIONS.find(f => f.id === selectedFace);\n  const getCurrentSkinColor = () => SKIN_COLORS.find(c => c.id === selectedSkinColor);\n  const getAccessoryEmojis = () => \n    selectedAccessories\n      .map(id => ACCESSORY_OPTIONS.find(a => a.id === id)?.emoji)\n      .filter(Boolean)\n      .join(' ');\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Preview */}\n      <div className=\"flex justify-center\">\n        <Card className=\"w-40 h-40 flex items-center justify-center\">\n          <div \n            className=\"w-32 h-32 rounded-full flex items-center justify-center text-6xl relative\"\n            style={{ backgroundColor: getCurrentSkinColor()?.color }}\n          >\n            <span>{getCurrentFace()?.emoji}</span>\n            {selectedAccessories.length > 0 && (\n              <div className=\"absolute -top-2 -right-2 text-3xl\">\n                {getAccessoryEmojis()}\n              </div>\n            )}\n          </div>\n        </Card>\n      </div>\n\n      <Separator />\n\n      {/* Face Selection */}\n      <div className=\"space-y-3\">\n        <Label className=\"flex items-center gap-2\">\n          <Sparkles className=\"w-4 h-4\" />\n          Choose Face Expression\n        </Label>\n        <div className=\"grid grid-cols-4 gap-2\">\n          {FACE_OPTIONS.map((face) => (\n            <motion.button\n              key={face.id}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setSelectedFace(face.id)}\n              className={`\n                p-3 rounded-lg border-2 transition-all\n                ${selectedFace === face.id \n                  ? 'border-primary bg-primary/10' \n                  : 'border-muted hover:border-primary/50'\n                }\n              `}\n            >\n              <div className=\"text-3xl\">{face.emoji}</div>\n              <div className=\"text-xs mt-1 text-muted-foreground\">{face.label}</div>\n            </motion.button>\n          ))}\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Skin Color Selection */}\n      <div className=\"space-y-3\">\n        <Label className=\"flex items-center gap-2\">\n          <Palette className=\"w-4 h-4\" />\n          Choose Skin Color\n        </Label>\n        <div className=\"grid grid-cols-6 gap-2\">\n          {SKIN_COLORS.map((skin) => (\n            <motion.button\n              key={skin.id}\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={() => setSelectedSkinColor(skin.id)}\n              className={`\n                w-12 h-12 rounded-full border-4 transition-all\n                ${selectedSkinColor === skin.id \n                  ? 'border-primary ring-2 ring-primary/50' \n                  : 'border-muted hover:border-primary/50'\n                }\n              `}\n              style={{ backgroundColor: skin.color }}\n              title={skin.label}\n            />\n          ))}\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Accessories Selection */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <Label>Add Accessories (Optional)</Label>\n          {selectedAccessories.length > 0 && (\n            <Badge variant=\"secondary\">{selectedAccessories.length} selected</Badge>\n          )}\n        </div>\n        <div className=\"grid grid-cols-4 gap-2\">\n          {ACCESSORY_OPTIONS.map((accessory) => (\n            <motion.button\n              key={accessory.id}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => toggleAccessory(accessory.id)}\n              className={`\n                p-3 rounded-lg border-2 transition-all\n                ${selectedAccessories.includes(accessory.id) || (accessory.id === 'none' && selectedAccessories.length === 0)\n                  ? 'border-primary bg-primary/10' \n                  : 'border-muted hover:border-primary/50'\n                }\n              `}\n            >\n              <div className=\"text-2xl\">{accessory.emoji || '∅'}</div>\n              <div className=\"text-xs mt-1 text-muted-foreground\">{accessory.label}</div>\n            </motion.button>\n          ))}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex gap-3 pt-4\">\n        <Button variant=\"outline\" onClick={onCancel} className=\"flex-1\">\n          Cancel\n        </Button>\n        <Button onClick={handleSave} className=\"flex-1\">\n          Save Avatar\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6099},"client/src/components/GameModeSelector.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Smartphone, Wifi, Timer, Eye, Target } from \"lucide-react\";\n\ninterface GameModeProps {\n  onSelectMode: (mode: 'local' | 'online') => void;\n}\n\nexport default function GameModeSelector({ onSelectMode }: GameModeProps) {\n  const [selectedMode, setSelectedMode] = useState<'local' | 'online' | null>(null);\n\n  const handleModeSelect = (mode: 'local' | 'online') => {\n    setSelectedMode(mode);\n    console.log(`${mode} mode selected`);\n    onSelectMode(mode);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        duration: 0.6,\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.5, ease: \"easeOut\" }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5 flex items-center justify-center p-4\">\n      <motion.div \n        className=\"w-full max-w-4xl space-y-8\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        {/* Header */}\n        <motion.div variants={itemVariants} className=\"text-center space-y-4\">\n          <div className=\"inline-flex items-center gap-3 mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center\">\n              <Eye className=\"w-6 h-6 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-4xl font-gaming font-bold text-foreground\">Secret Missions</h1>\n          </div>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Complete your secret mission without being discovered. Identify other players' missions to eliminate them.\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Users className=\"w-3 h-3\" />\n              4+ Players\n            </Badge>\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Timer className=\"w-3 h-3\" />\n              10-30 min\n            </Badge>\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Target className=\"w-3 h-3\" />\n              Social Deduction\n            </Badge>\n          </div>\n        </motion.div>\n\n        {/* Game Mode Selection */}\n        <motion.div variants={itemVariants} className=\"grid md:grid-cols-2 gap-6\">\n          {/* Local Mode */}\n          <Card \n            className={`hover-elevate cursor-pointer transition-all duration-200 ${\n              selectedMode === 'local' ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => handleModeSelect('local')}\n            data-testid=\"card-local-mode\"\n          >\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gaming-player-highlight/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Smartphone className=\"w-8 h-8 text-gaming-player-highlight\" />\n              </div>\n              <CardTitle className=\"text-xl font-gaming\">Local Mode</CardTitle>\n              <CardDescription>\n                Pass one device around the table\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Perfect for in-person game nights\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Each player takes turns on the same device\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Screen privacy automatically handled\n                  </p>\n                </div>\n              </div>\n              <Button \n                className=\"w-full\" \n                variant={selectedMode === 'local' ? 'default' : 'outline'}\n                data-testid=\"button-select-local\"\n              >\n                Select Local Mode\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Online Mode */}\n          <Card \n            className={`hover-elevate cursor-pointer transition-all duration-200 ${\n              selectedMode === 'online' ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => handleModeSelect('online')}\n            data-testid=\"card-online-mode\"\n          >\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Wifi className=\"w-8 h-8 text-primary\" />\n              </div>\n              <CardTitle className=\"text-xl font-gaming\">Online Mode</CardTitle>\n              <CardDescription>\n                Each player uses their own device\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Play remotely with friends anywhere\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Built-in chat and communication\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Private lobbies with room codes\n                  </p>\n                </div>\n              </div>\n              <Button \n                className=\"w-full\" \n                variant={selectedMode === 'online' ? 'default' : 'outline'}\n                data-testid=\"button-select-online\"\n              >\n                Select Online Mode\n              </Button>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Game Rules Quick Reference */}\n        <motion.div variants={itemVariants}>\n          <Card className=\"bg-gaming-mission-card/10\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-gaming text-center\">How to Play</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid sm:grid-cols-3 gap-4 text-center\">\n              <div className=\"space-y-2\">\n                <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center mx-auto\">\n                  <span className=\"text-primary-foreground font-bold\">1</span>\n                </div>\n                <h4 className=\"font-semibold\">Get Your Mission</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receive a secret mission to complete during the game\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"w-10 h-10 bg-gaming-warning rounded-full flex items-center justify-center mx-auto\">\n                  <span className=\"text-white font-bold\">2</span>\n                </div>\n                <h4 className=\"font-semibold\">Stay Hidden</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Complete your mission without others discovering it\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"w-10 h-10 bg-gaming-danger rounded-full flex items-center justify-center mx-auto\">\n                  <span className=\"text-white font-bold\">3</span>\n                </div>\n                <h4 className=\"font-semibold\">Eliminate Others</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Correctly guess others' missions to eliminate them\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":9140},"client/src/components/GameResults.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Trophy, Crown, Target, Clock, Users, RotateCcw, Home, Share } from \"lucide-react\";\nimport PlayerAvatar from \"./PlayerAvatar\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface GameResultsProps {\n  gameStats: {\n    duration: number; // seconds played\n    totalPlayers: number;\n    missionsCompleted: number;\n    totalGuesses: number;\n    correctGuesses: number;\n  };\n  players: Array<{\n    id: string;\n    name: string;\n    avatar?: string;\n    result: 'winner' | 'survivor' | 'eliminated';\n    mission?: string;\n    completedMission: boolean;\n    correctGuesses: number;\n    incorrectGuesses: number;\n  }>;\n  winCondition: 'time-up' | 'last-survivor' | 'mission-complete';\n  onPlayAgain?: () => void;\n  onReturnToMenu?: () => void;\n}\n\nexport default function GameResults({ \n  gameStats, \n  players, \n  winCondition,\n  onPlayAgain,\n  onReturnToMenu \n}: GameResultsProps) {\n  const { toast } = useToast();\n  \n  const winners = players.filter(p => p.result === 'winner');\n  const survivors = players.filter(p => p.result === 'survivor');\n  const eliminated = players.filter(p => p.result === 'eliminated');\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getWinConditionText = () => {\n    switch (winCondition) {\n      case 'time-up':\n        return 'Time ran out - surviving players win!';\n      case 'last-survivor':\n        return 'Only one player remains undiscovered!';\n      case 'mission-complete':\n        return 'Winner completed their mission first!';\n      default:\n        return 'Game completed!';\n    }\n  };\n\n  const shareResults = () => {\n    const resultText = `Just played Secret Missions! ${winners.length > 1 ? 'We' : winners[0]?.name} won by ${winCondition}. ${gameStats.totalPlayers} players, ${Math.floor(gameStats.duration / 60)} minutes of fun!`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: 'Secret Missions Game Results',\n        text: resultText,\n      });\n    } else {\n      navigator.clipboard.writeText(resultText);\n      toast({\n        title: \"Results Copied!\",\n        description: \"Share your game results with friends\",\n      });\n    }\n    console.log('Shared results:', resultText);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-gaming-mission-card/5 to-primary/10 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        \n        {/* Header */}\n        <Card className=\"relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-gaming-success/20 to-gaming-warning/20\" />\n          <CardContent className=\"relative p-8 text-center\">\n            <Trophy className=\"w-16 h-16 mx-auto text-gaming-warning mb-4\" />\n            <h1 className=\"text-3xl font-gaming font-bold mb-2\">Game Complete!</h1>\n            <p className=\"text-lg text-muted-foreground mb-4\">\n              {getWinConditionText()}\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Badge variant=\"outline\" className=\"text-sm\">\n                <Clock className=\"w-4 h-4 mr-1\" />\n                {formatDuration(gameStats.duration)}\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                <Users className=\"w-4 h-4 mr-1\" />\n                {gameStats.totalPlayers} players\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                <Target className=\"w-4 h-4 mr-1\" />\n                {gameStats.correctGuesses} correct guesses\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          \n          {/* Winners & Survivors */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Winners */}\n            {winners.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-gaming-success\">\n                    <Crown className=\"w-5 h-5\" />\n                    {winners.length === 1 ? 'Winner' : 'Winners'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                    {winners.map((player, index) => (\n                      <div key={player.id} className=\"relative\">\n                        <PlayerAvatar \n                          id={player.id}\n                          name={player.name}\n                          status=\"completed\"\n                          avatar={player.avatar}\n                        />\n                        {index === 0 && (\n                          <div className=\"absolute -top-2 -right-2\">\n                            <div className=\"w-8 h-8 bg-gaming-warning rounded-full flex items-center justify-center\">\n                              <Crown className=\"w-4 h-4 text-white\" />\n                            </div>\n                          </div>\n                        )}\n                        <div className=\"mt-2 text-center space-y-1\">\n                          <div className=\"text-xs font-medium\">Mission Completed</div>\n                          {player.mission && (\n                            <div className=\"text-xs text-muted-foreground\">\n                              \"{player.mission}\"\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Survivors */}\n            {survivors.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5\" />\n                    Survivors\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                    {survivors.map((player) => (\n                      <div key={player.id}>\n                        <PlayerAvatar \n                          id={player.id}\n                          name={player.name}\n                          status=\"active\"\n                          avatar={player.avatar}\n                        />\n                        <div className=\"mt-2 text-center\">\n                          <div className=\"text-xs text-muted-foreground\">\n                            Avoided detection\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Eliminated Players */}\n            {eliminated.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Target className=\"w-5 h-5\" />\n                    Eliminated Players\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {eliminated.map((player) => (\n                      <div key={player.id} className=\"flex items-center gap-4 p-3 bg-muted/30 rounded-lg\">\n                        <PlayerAvatar \n                          id={player.id}\n                          name={player.name}\n                          status=\"eliminated\"\n                          avatar={player.avatar}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{player.name}</div>\n                          {player.mission && (\n                            <div className=\"text-sm text-muted-foreground\">\n                              Mission: \"{player.mission}\"\n                            </div>\n                          )}\n                          <div className=\"text-xs text-muted-foreground\">\n                            {player.correctGuesses} correct, {player.incorrectGuesses} wrong guesses\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Game Statistics & Actions */}\n          <div className=\"space-y-6\">\n            \n            {/* Game Statistics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Game Statistics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <div className=\"text-muted-foreground\">Duration</div>\n                    <div className=\"font-semibold\">{formatDuration(gameStats.duration)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Total Players</div>\n                    <div className=\"font-semibold\">{gameStats.totalPlayers}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Missions Done</div>\n                    <div className=\"font-semibold\">{gameStats.missionsCompleted}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Total Guesses</div>\n                    <div className=\"font-semibold\">{gameStats.totalGuesses}</div>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"text-center\">\n                  <div className=\"text-sm text-muted-foreground\">Guess Accuracy</div>\n                  <div className=\"text-2xl font-bold\">\n                    {gameStats.totalGuesses > 0 \n                      ? Math.round((gameStats.correctGuesses / gameStats.totalGuesses) * 100)\n                      : 0\n                    }%\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {gameStats.correctGuesses} of {gameStats.totalGuesses} guesses correct\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <Card>\n              <CardContent className=\"p-6 space-y-3\">\n                <Button \n                  onClick={() => {\n                    console.log('Playing again...');\n                    onPlayAgain?.();\n                  }}\n                  className=\"w-full\"\n                  data-testid=\"button-play-again\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Play Again\n                </Button>\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={shareResults}\n                  className=\"w-full\"\n                  data-testid=\"button-share-results\"\n                >\n                  <Share className=\"w-4 h-4 mr-2\" />\n                  Share Results\n                </Button>\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    console.log('Returning to menu...');\n                    onReturnToMenu?.();\n                  }}\n                  className=\"w-full\"\n                  data-testid=\"button-return-menu\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Return to Menu\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Achievement/Fun Fact */}\n            <Card className=\"bg-gaming-mission-card/10\">\n              <CardHeader>\n                <CardTitle className=\"text-sm\">🎭 Fun Fact</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground\">\n                  {winners.length > 0 && winners[0].completedMission\n                    ? `${winners[0].name} successfully completed their secret mission while staying undetected!`\n                    : `This game had ${gameStats.correctGuesses} successful mission discoveries out of ${gameStats.totalGuesses} attempts.`\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12788},"client/src/components/GameTimer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Play, Pause, RotateCcw, AlertTriangle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GameTimerProps {\n  initialTime: number; // in seconds\n  isRunning?: boolean;\n  onTimeUp?: () => void;\n  onToggle?: (running: boolean) => void;\n  showControls?: boolean;\n  warningThreshold?: number; // seconds when to show warning\n}\n\nexport default function GameTimer({ \n  initialTime, \n  isRunning = false, \n  onTimeUp, \n  onToggle,\n  showControls = true,\n  warningThreshold = 60 \n}: GameTimerProps) {\n  const [timeLeft, setTimeLeft] = useState(initialTime);\n  const [running, setRunning] = useState(isRunning);\n\n  useEffect(() => {\n    setTimeLeft(initialTime);\n  }, [initialTime]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (running && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            setRunning(false);\n            onTimeUp?.();\n            console.log('Timer finished!');\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n\n    return () => clearInterval(interval);\n  }, [running, timeLeft, onTimeUp]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getProgressPercentage = () => {\n    return ((initialTime - timeLeft) / initialTime) * 100;\n  };\n\n  const isWarning = timeLeft <= warningThreshold && timeLeft > 0;\n  const isCritical = timeLeft <= 10 && timeLeft > 0;\n\n  const handleToggle = () => {\n    const newRunning = !running;\n    setRunning(newRunning);\n    console.log(`Timer ${newRunning ? 'started' : 'paused'}`);\n    onToggle?.(newRunning);\n  };\n\n  const handleReset = () => {\n    setTimeLeft(initialTime);\n    setRunning(false);\n    console.log('Timer reset');\n    onToggle?.(false);\n  };\n\n  return (\n    <Card className={cn(\n      \"relative overflow-hidden transition-all duration-300\",\n      isWarning && \"ring-2 ring-gaming-warning\",\n      isCritical && \"ring-2 ring-gaming-danger animate-pulse\"\n    )}>\n      {/* Progress Bar Background */}\n      <div className=\"absolute top-0 left-0 right-0 h-1 bg-muted\">\n        <div \n          className={cn(\n            \"h-full transition-all duration-1000 ease-linear\",\n            isCritical ? \"bg-gaming-danger\" : \n            isWarning ? \"bg-gaming-warning\" : \"bg-gaming-success\"\n          )}\n          style={{ width: `${getProgressPercentage()}%` }}\n        />\n      </div>\n\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className={cn(\n              \"w-5 h-5\",\n              isCritical ? \"text-gaming-danger animate-pulse\" :\n              isWarning ? \"text-gaming-warning\" : \"text-muted-foreground\"\n            )} />\n            <span className=\"text-sm font-medium text-muted-foreground\">Game Timer</span>\n          </div>\n          \n          {(isWarning || isCritical) && (\n            <Badge \n              variant=\"outline\" \n              className={cn(\n                \"animate-pulse\",\n                isCritical ? \"border-gaming-danger text-gaming-danger\" :\n                \"border-gaming-warning text-gaming-warning\"\n              )}\n            >\n              <AlertTriangle className=\"w-3 h-3 mr-1\" />\n              {isCritical ? \"CRITICAL\" : \"WARNING\"}\n            </Badge>\n          )}\n        </div>\n\n        {/* Main Timer Display */}\n        <div className=\"text-center mb-6\">\n          <div className={cn(\n            \"text-6xl font-bold font-gaming tabular-nums transition-colors duration-300\",\n            isCritical ? \"text-gaming-danger\" :\n            isWarning ? \"text-gaming-warning\" : \"text-foreground\"\n          )}>\n            {formatTime(timeLeft)}\n          </div>\n          \n          <p className=\"text-sm text-muted-foreground mt-2\">\n            {timeLeft === 0 ? \"Time's Up!\" : \n             running ? \"Game in Progress\" : \"Game Paused\"}\n          </p>\n        </div>\n\n        {/* Timer Controls */}\n        {showControls && (\n          <div className=\"flex gap-2 justify-center\">\n            <Button\n              onClick={handleToggle}\n              disabled={timeLeft === 0}\n              className=\"flex items-center gap-2\"\n              data-testid={running ? \"button-pause-timer\" : \"button-start-timer\"}\n            >\n              {running ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n              {running ? \"Pause\" : \"Start\"}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleReset}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-reset-timer\"\n            >\n              <RotateCcw className=\"w-4 h-4\" />\n              Reset\n            </Button>\n          </div>\n        )}\n\n        {/* Time Status */}\n        <div className=\"mt-4 text-center\">\n          <div className=\"text-xs text-muted-foreground\">\n            {Math.floor((initialTime - timeLeft) / 60)}m {(initialTime - timeLeft) % 60}s elapsed • {Math.floor(timeLeft / 60)}m {timeLeft % 60}s remaining\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":5493},"client/src/components/GuessInterface.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Target, Send, AlertTriangle, CheckCircle, XCircle, Users } from \"lucide-react\";\nimport PlayerAvatar from \"./PlayerAvatar\";\n\ninterface GuessInterfaceProps {\n  players: Array<{\n    id: string;\n    name: string;\n    status: 'active' | 'eliminated' | 'completed' | 'host';\n    avatar?: string;\n  }>;\n  currentPlayerId: string;\n  incorrectGuesses: number;\n  maxIncorrectGuesses: number;\n  onSubmitGuess: (targetPlayerId: string, guessedMission: string) => void;\n}\n\nexport default function GuessInterface({ \n  players, \n  currentPlayerId, \n  incorrectGuesses, \n  maxIncorrectGuesses,\n  onSubmitGuess \n}: GuessInterfaceProps) {\n  const [selectedPlayer, setSelectedPlayer] = useState<string>(\"\");\n  const [guessedMission, setGuessedMission] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const eligiblePlayers = players.filter(p => \n    p.id !== currentPlayerId && p.status !== 'eliminated'\n  );\n\n  const remainingGuesses = maxIncorrectGuesses - incorrectGuesses;\n  const isAtRisk = remainingGuesses <= 1;\n\n  const handleSubmitGuess = async () => {\n    if (!selectedPlayer || !guessedMission.trim()) return;\n\n    setIsSubmitting(true);\n    console.log(`Guessing ${guessedMission} for player ${selectedPlayer}`);\n    \n    // Simulate API call delay\n    setTimeout(() => {\n      onSubmitGuess(selectedPlayer, guessedMission.trim());\n      setSelectedPlayer(\"\");\n      setGuessedMission(\"\");\n      setIsSubmitting(false);\n    }, 1000);\n  };\n\n  const selectedPlayerData = eligiblePlayers.find(p => p.id === selectedPlayer);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Guess Status Warning */}\n      {isAtRisk && (\n        <Card className=\"border-gaming-danger bg-gaming-danger/5\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <AlertTriangle className=\"w-5 h-5 text-gaming-danger flex-shrink-0\" />\n              <div>\n                <h4 className=\"font-semibold text-gaming-danger\">Careful!</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  You have {remainingGuesses} incorrect guess{remainingGuesses === 1 ? '' : 'es'} remaining. \n                  One more wrong guess will eliminate you!\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Guess Interface */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            Guess Someone's Mission\n          </CardTitle>\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Identify another player's secret mission to eliminate them\n            </p>\n            <Badge variant={isAtRisk ? \"destructive\" : \"secondary\"}>\n              {remainingGuesses} guesses left\n            </Badge>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Player Selection */}\n          <div className=\"space-y-3\">\n            <Label htmlFor=\"player-select\">Choose Target Player</Label>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n              {eligiblePlayers.map((player) => (\n                <div\n                  key={player.id}\n                  className={`p-3 rounded-lg border-2 cursor-pointer transition-all duration-200 hover-elevate ${\n                    selectedPlayer === player.id \n                      ? 'border-primary bg-primary/5' \n                      : 'border-border hover:border-primary/50'\n                  }`}\n                  onClick={() => setSelectedPlayer(player.id)}\n                  data-testid={`select-player-${player.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <PlayerAvatar \n                      id={player.id}\n                      name={player.name}\n                      status={player.status}\n                      avatar={player.avatar}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Alternative Select Dropdown (for smaller screens or lots of players) */}\n          {eligiblePlayers.length > 6 && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"player-dropdown\">Or select from dropdown:</Label>\n              <Select value={selectedPlayer} onValueChange={setSelectedPlayer}>\n                <SelectTrigger data-testid=\"select-target-player\">\n                  <SelectValue placeholder=\"Choose a player to guess...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {eligiblePlayers.map((player) => (\n                    <SelectItem key={player.id} value={player.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"w-4 h-4\" />\n                        {player.name}\n                        <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                          {player.status}\n                        </Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Mission Guess Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"mission-guess\">\n              What is {selectedPlayerData ? selectedPlayerData.name + \"'s\" : \"their\"} secret mission?\n            </Label>\n            <Textarea\n              id=\"mission-guess\"\n              placeholder=\"Describe what you think their mission is... (e.g., 'Make someone laugh', 'Ask about the weather', 'Compliment someone's outfit')\"\n              value={guessedMission}\n              onChange={(e) => setGuessedMission(e.target.value)}\n              className=\"min-h-20\"\n              data-testid=\"input-mission-guess\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Be specific! Vague guesses are more likely to be wrong.\n            </p>\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            onClick={handleSubmitGuess}\n            disabled={!selectedPlayer || !guessedMission.trim() || isSubmitting}\n            className=\"w-full flex items-center gap-2\"\n            data-testid=\"button-submit-guess\"\n          >\n            {isSubmitting ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                Submitting Guess...\n              </>\n            ) : (\n              <>\n                <Send className=\"w-4 h-4\" />\n                Submit Guess\n              </>\n            )}\n          </Button>\n\n          {/* Previous Guesses Indicator */}\n          {incorrectGuesses > 0 && (\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <XCircle className=\"w-4 h-4 text-gaming-danger\" />\n                <span className=\"text-sm font-medium\">Previous Incorrect Guesses</span>\n              </div>\n              <div className=\"flex gap-1\">\n                {Array.from({ length: maxIncorrectGuesses }, (_, i) => (\n                  <div\n                    key={i}\n                    className={`w-3 h-3 rounded-full ${\n                      i < incorrectGuesses ? 'bg-gaming-danger' : 'bg-muted'\n                    }`}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Tips */}\n      <Card className=\"bg-gaming-mission-card/5\">\n        <CardHeader>\n          <CardTitle className=\"text-sm flex items-center gap-2\">\n            <CheckCircle className=\"w-4 h-4 text-gaming-success\" />\n            Guessing Tips\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            • Watch for unusual behavior or repeated actions\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            • Listen for specific words or phrases they keep using\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            • Be specific in your guess - \"make someone laugh\" is better than \"be funny\"\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8904},"client/src/components/LobbyInterface.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Copy, Settings, Play, Users, Clock, Target, Crown, UserPlus, Zap, Edit3 } from \"lucide-react\";\nimport PlayerAvatar from \"./PlayerAvatar\";\nimport GameTimer from \"./GameTimer\";\nimport AvatarSelector from \"./AvatarSelector\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type AvatarConfig, createDefaultAvatar } from \"@/lib/avatarData\";\n\ninterface LobbySettings {\n  maxPlayers: number;\n  gameDuration: number;\n  allowSpectators: boolean;\n  specialFeatures: {\n    missionSwitching: boolean;\n    duoMissions: boolean;\n    noMissionPlayers: boolean;\n    timerVariations: boolean;\n    secretAlliances: boolean;\n  };\n}\n\ninterface LobbyInterfaceProps {\n  lobbyCode: string;\n  isHost: boolean;\n  players: Array<{\n    id: string;\n    name: string;\n    status: 'active' | 'host';\n    avatar?: string;\n  }>;\n  gameSettings: LobbySettings;\n  gameMode?: 'local' | 'online';\n  onUpdateSettings?: (settings: LobbySettings) => void;\n  onStartGame?: () => void;\n  onKickPlayer?: (playerId: string) => void;\n}\n\nexport default function LobbyInterface({ \n  lobbyCode, \n  isHost, \n  players, \n  gameSettings,\n  gameMode = 'online',\n  onUpdateSettings,\n  onStartGame,\n  onKickPlayer \n}: LobbyInterfaceProps) {\n  const [showSettings, setShowSettings] = useState(false);\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n  const [showAvatarEditor, setShowAvatarEditor] = useState(false);\n  const [currentPlayerAvatar, setCurrentPlayerAvatar] = useState<AvatarConfig>(\n    createDefaultAvatar(players.find(p => p.status === 'host' || !isHost)?.name || \"Player\")\n  );\n  const { toast } = useToast();\n\n  const copyLobbyCode = () => {\n    navigator.clipboard.writeText(lobbyCode);\n    toast({\n      title: \"Lobby Code Copied\",\n      description: \"Share this code with friends to join the game!\",\n    });\n    console.log('Lobby code copied:', lobbyCode);\n  };\n\n  const handleStartGame = () => {\n    console.log('Starting game...');\n    onStartGame?.();\n  };\n\n  const canStartGame = players.length >= 4;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        \n        {/* Header with Lobby Code */}\n        <Card className=\"relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 to-gaming-player-highlight/10\" />\n          <CardContent className=\"relative p-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-gaming font-bold\">Game Lobby</h1>\n                <p className=\"text-muted-foreground\">\n                  {isHost ? \"You're hosting this game\" : \"Waiting for host to start\"}\n                </p>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-center\">\n                  <Label className=\"text-xs text-muted-foreground\">LOBBY CODE</Label>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <code className=\"text-2xl font-gaming font-bold px-3 py-1 bg-card rounded border\">\n                      {lobbyCode}\n                    </code>\n                    <Button \n                      variant=\"outline\" \n                      size=\"icon\"\n                      onClick={copyLobbyCode}\n                      data-testid=\"button-copy-code\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  {gameMode === 'online' && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setShowAvatarEditor(true)}\n                      data-testid=\"button-edit-avatar\"\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Edit3 className=\"w-4 h-4\" />\n                      Edit Avatar\n                    </Button>\n                  )}\n                  \n                  {isHost && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setShowSettings(!showSettings)}\n                      data-testid=\"button-settings\"\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Settings className=\"w-4 h-4\" />\n                      Settings\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          \n          {/* Players Section */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Current Players */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Players ({players.length}/{gameSettings.maxPlayers})\n                </CardTitle>\n                <div className=\"flex gap-2\">\n                  <Badge variant={canStartGame ? \"default\" : \"secondary\"}>\n                    {canStartGame ? \"Ready to Start\" : \"Need More Players\"}\n                  </Badge>\n                  {canStartGame && (\n                    <Badge variant=\"outline\" className=\"text-gaming-success border-gaming-success\">\n                      Minimum Met\n                    </Badge>\n                  )}\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                  {players.map((player) => (\n                    <div key={player.id} className=\"relative\">\n                      <PlayerAvatar \n                        id={player.id}\n                        name={player.name}\n                        status={player.status}\n                        avatar={player.avatar}\n                        onClick={() => console.log(`Clicked player ${player.name}`)}\n                      />\n                      {isHost && player.status !== 'host' && (\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"absolute -top-2 -right-2 w-6 h-6 rounded-full p-0 text-xs\"\n                          onClick={() => onKickPlayer?.(player.id)}\n                          data-testid={`button-kick-${player.id}`}\n                        >\n                          ×\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                  \n                  {/* Empty Slots */}\n                  {Array.from({ length: gameSettings.maxPlayers - players.length }, (_, i) => (\n                    <div \n                      key={`empty-${i}`}\n                      className=\"border-2 border-dashed border-muted rounded-lg p-4 flex flex-col items-center justify-center text-muted-foreground space-y-2\"\n                    >\n                      <UserPlus className=\"w-8 h-8\" />\n                      <span className=\"text-xs\">Waiting for player</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Game Settings Display */}\n            {showSettings && isHost && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3 }}\n              >\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Settings className=\"w-5 h-5\" />\n                      Game Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Basic Settings */}\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-base font-medium\">Basic Settings</Label>\n                      <div className=\"grid sm:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label>Max Players</Label>\n                          <Select \n                            value={gameSettings.maxPlayers.toString()} \n                            onValueChange={(value) => onUpdateSettings?.({ ...gameSettings, maxPlayers: parseInt(value) })}\n                          >\n                            <SelectTrigger data-testid=\"select-max-players\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"4\">4 Players</SelectItem>\n                              <SelectItem value=\"6\">6 Players</SelectItem>\n                              <SelectItem value=\"8\">8 Players</SelectItem>\n                              <SelectItem value=\"10\">10 Players</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label>Game Duration</Label>\n                          <Select \n                            value={gameSettings.gameDuration.toString()} \n                            onValueChange={(value) => onUpdateSettings?.({ ...gameSettings, gameDuration: parseInt(value) })}\n                          >\n                            <SelectTrigger data-testid=\"select-game-duration\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"10\">10 minutes</SelectItem>\n                              <SelectItem value=\"15\">15 minutes</SelectItem>\n                              <SelectItem value=\"20\">20 minutes</SelectItem>\n                              <SelectItem value=\"30\">30 minutes</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between p-3 bg-card rounded-lg\">\n                        <div className=\"space-y-1\">\n                          <Label>Allow Spectators</Label>\n                          <p className=\"text-xs text-muted-foreground\">Let others watch without playing</p>\n                        </div>\n                        <Switch\n                          checked={gameSettings.allowSpectators}\n                          onCheckedChange={(checked) => onUpdateSettings?.({ ...gameSettings, allowSpectators: checked })}\n                          data-testid=\"switch-allow-spectators\"\n                        />\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Special Features */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Zap className=\"w-4 h-4 text-primary\" />\n                        <Label className=\"text-base font-medium\">Special Game Features</Label>\n                        <Badge variant=\"outline\" className=\"text-xs\">Optional</Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Enable special gameplay mechanics to enhance your game experience\n                      </p>\n\n                      <div className=\"space-y-3\">\n                        {[\n                          {\n                            key: 'missionSwitching' as const,\n                            title: 'Mission Switching',\n                            description: 'Players can swap missions with others during gameplay'\n                          },\n                          {\n                            key: 'duoMissions' as const,\n                            title: 'Duo Missions',\n                            description: 'Some missions require collaboration between two players'\n                          },\n                          {\n                            key: 'noMissionPlayers' as const,\n                            title: 'No Mission Players',\n                            description: 'Some players have no mission and must eliminate others'\n                          },\n                          {\n                            key: 'timerVariations' as const,\n                            title: 'Timer Variations',\n                            description: 'Dynamic time limits that change based on game events'\n                          },\n                          {\n                            key: 'secretAlliances' as const,\n                            title: 'Secret Alliances',\n                            description: 'Hidden team formations revealed during the game'\n                          }\n                        ].map((feature, index) => (\n                          <motion.div\n                            key={feature.key}\n                            initial={{ opacity: 0, x: -10 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ duration: 0.2, delay: index * 0.1 }}\n                            className=\"flex items-center justify-between p-3 bg-card rounded-lg hover-elevate\"\n                          >\n                            <div className=\"space-y-1\">\n                              <Label>{feature.title}</Label>\n                              <p className=\"text-xs text-muted-foreground\">{feature.description}</p>\n                            </div>\n                            <Switch\n                              checked={gameSettings.specialFeatures[feature.key]}\n                              onCheckedChange={(checked) => onUpdateSettings?.({ \n                                ...gameSettings, \n                                specialFeatures: {\n                                  ...gameSettings.specialFeatures,\n                                  [feature.key]: checked\n                                }\n                              })}\n                              data-testid={`switch-${feature.key.replace(/([A-Z])/g, '-$1').toLowerCase()}`}\n                            />\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n          </div>\n\n          {/* Game Info & Controls */}\n          <div className=\"space-y-6\">\n            \n            {/* Game Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5\" />\n                  Game Info\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <div className=\"text-muted-foreground\">Duration</div>\n                    <div className=\"font-semibold flex items-center gap-1\">\n                      <Clock className=\"w-4 h-4\" />\n                      {gameSettings.gameDuration}m\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Mode</div>\n                    <div className=\"font-semibold capitalize\">{gameMode}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Max Players</div>\n                    <div className=\"font-semibold\">{gameSettings.maxPlayers}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Spectators</div>\n                    <div className=\"font-semibold\">\n                      {gameSettings.allowSpectators ? 'Allowed' : 'Not Allowed'}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Special Features Summary */}\n                {Object.values(gameSettings.specialFeatures).some(Boolean) && (\n                  <>\n                    <Separator />\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-semibold text-sm flex items-center gap-2\">\n                        <Zap className=\"w-4 h-4 text-primary\" />\n                        Active Features:\n                      </h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {Object.entries(gameSettings.specialFeatures)\n                          .filter(([_, enabled]) => enabled)\n                          .map(([key, _]) => (\n                            <Badge key={key} variant=\"secondary\" className=\"text-xs\">\n                              {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                            </Badge>\n                          ))}\n                      </div>\n                    </div>\n                  </>\n                )}\n                \n                <Separator />\n                \n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-sm\">How to Win:</h4>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>• Complete your secret mission</li>\n                    <li>• Avoid being discovered by others</li>\n                    <li>• Eliminate opponents by guessing their missions</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Start Game Button */}\n            {isHost && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  {canStartGame ? (\n                    <Button \n                      onClick={handleStartGame}\n                      className=\"w-full h-12 text-lg font-semibold\"\n                      data-testid=\"button-start-game\"\n                    >\n                      <Play className=\"w-5 h-5 mr-2\" />\n                      Start Game\n                    </Button>\n                  ) : (\n                    <div className=\"text-center space-y-3\">\n                      <Button disabled className=\"w-full h-12\">\n                        <Users className=\"w-5 h-5 mr-2\" />\n                        Need {4 - players.length} More Players\n                      </Button>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Share the lobby code with friends to join\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Waiting Message for Non-Hosts */}\n            {!isHost && (\n              <Card className=\"bg-muted/50\">\n                <CardContent className=\"p-6 text-center\">\n                  <Crown className=\"w-8 h-8 text-gaming-warning mx-auto mb-2\" />\n                  <h3 className=\"font-semibold\">Waiting for Host</h3>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    The game will start when the host is ready\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Avatar Editor Dialog - Online Mode Only */}\n      {gameMode === 'online' && showAvatarEditor && (\n        <AvatarSelector\n          playerName={players.find(p => p.status === 'host' && isHost)?.name || players[0]?.name || \"Player\"}\n          currentAvatar={currentPlayerAvatar}\n          onAvatarChange={(newAvatar) => {\n            setCurrentPlayerAvatar(newAvatar);\n            toast({\n              title: \"Avatar Updated\",\n              description: \"Your avatar has been customized successfully!\",\n            });\n          }}\n          onClose={() => setShowAvatarEditor(false)}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":20733},"client/src/components/LobbyJoin.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { LogIn, ArrowLeft, Users, Wifi, AlertCircle, Edit } from \"lucide-react\";\nimport AvatarSelector from \"./AvatarSelector\";\nimport { type AvatarConfig, createDefaultAvatar, SKIN_COLORS, FACE_OPTIONS, ACCESSORY_OPTIONS } from \"@/lib/avatarData\";\n\ninterface LobbyJoinProps {\n  onJoinLobby: (lobbyCode: string, playerName: string, avatar: AvatarConfig) => void;\n  onBack: () => void;\n  isJoining?: boolean;\n  error?: string;\n}\n\nexport default function LobbyJoin({ onJoinLobby, onBack, isJoining = false, error }: LobbyJoinProps) {\n  const [lobbyCode, setLobbyCode] = useState(\"\");\n  const [playerName, setPlayerName] = useState(\"\");\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\n  const [avatar, setAvatar] = useState<AvatarConfig>(createDefaultAvatar(\"\"));\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (lobbyCode.trim() && playerName.trim()) {\n      console.log('Joining lobby:', { lobbyCode, playerName, avatar });\n      onJoinLobby(lobbyCode.trim().toUpperCase(), playerName.trim(), avatar);\n    }\n  };\n\n  const formatLobbyCode = (value: string) => {\n    // Auto-format as user types: ABC123 -> ABC123\n    return value.toUpperCase().replace(/[^A-Z0-9]/g, '').substring(0, 6);\n  };\n\n  const isValid = lobbyCode.length >= 4 && playerName.length >= 2;\n\n  const handleNameChange = (name: string) => {\n    setPlayerName(name);\n    if (avatar.type === 'initials') {\n      setAvatar(createDefaultAvatar(name));\n    }\n  };\n\n  const renderAvatarPreview = () => {\n    if (avatar.type === 'upload' || avatar.type === 'camera') {\n      return (\n        <Avatar className=\"w-20 h-20\">\n          <AvatarImage src={avatar.imageUrl} />\n          <AvatarFallback>{avatar.initials || playerName.substring(0, 2).toUpperCase()}</AvatarFallback>\n        </Avatar>\n      );\n    } else if (avatar.type === 'custom' && avatar.customData) {\n      const face = FACE_OPTIONS.find(f => f.id === avatar.customData!.face);\n      const skinColor = SKIN_COLORS.find(c => c.id === avatar.customData!.skinColor);\n      const accessories = avatar.customData!.accessories\n        .map(id => ACCESSORY_OPTIONS.find(a => a.id === id)?.emoji)\n        .filter(Boolean)\n        .join(' ');\n\n      return (\n        <div \n          className=\"w-20 h-20 rounded-full flex items-center justify-center text-5xl relative\"\n          style={{ backgroundColor: skinColor?.color }}\n        >\n          <span>{face?.emoji}</span>\n          {accessories && (\n            <div className=\"absolute -top-2 -right-2 text-2xl\">\n              {accessories}\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <Avatar className=\"w-20 h-20\">\n          <AvatarFallback className=\"bg-primary/20 text-primary text-3xl font-bold\">\n            {avatar.initials || playerName.substring(0, 2).toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n      );\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, scale: 0.95 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: { duration: 0.4, ease: \"easeOut\" }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 flex items-center justify-center p-4\">\n      <motion.div \n        className=\"w-full max-w-md\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <Card className=\"relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-gaming-player-highlight/10 to-primary/10\" />\n          \n          <CardHeader className=\"relative\">\n            <div className=\"flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <div>\n                <CardTitle className=\"text-xl font-gaming\">Join Game</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Enter the lobby code to join an existing game\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"relative space-y-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {/* Lobby Code Input */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lobby-code\">Lobby Code</Label>\n                <Input\n                  id=\"lobby-code\"\n                  placeholder=\"Enter 6-character code...\"\n                  value={lobbyCode}\n                  onChange={(e) => setLobbyCode(formatLobbyCode(e.target.value))}\n                  className=\"text-center text-lg font-gaming tracking-wider\"\n                  maxLength={6}\n                  data-testid=\"input-lobby-code\"\n                />\n                <p className=\"text-xs text-muted-foreground text-center\">\n                  Example: GAME23, FUN456, PARTY1\n                </p>\n              </div>\n\n              <Separator />\n\n              {/* Avatar & Player Name */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"relative\">\n                    {renderAvatarPreview()}\n                    <Button\n                      type=\"button\"\n                      size=\"icon\"\n                      variant=\"secondary\"\n                      className=\"absolute -bottom-1 -right-1 w-8 h-8 rounded-full\"\n                      onClick={() => setShowAvatarSelector(true)}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex-1 space-y-2\">\n                    <Label htmlFor=\"player-name\">Your Name</Label>\n                    <Input\n                      id=\"player-name\"\n                      placeholder=\"Enter your display name...\"\n                      value={playerName}\n                      onChange={(e) => handleNameChange(e.target.value)}\n                      maxLength={20}\n                      data-testid=\"input-player-name\"\n                    />\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Click the edit button to customize your avatar\n                </p>\n              </div>\n\n              {/* Error Message */}\n              {error && (\n                <div className=\"flex items-start gap-2 p-3 bg-gaming-danger/10 rounded-lg border border-gaming-danger/20\">\n                  <AlertCircle className=\"w-4 h-4 text-gaming-danger flex-shrink-0 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gaming-danger\">Join Failed</p>\n                    <p className=\"text-xs text-gaming-danger/80\">{error}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Join Button */}\n              <Button\n                type=\"submit\"\n                disabled={!isValid || isJoining}\n                className=\"w-full h-12 text-lg\"\n                data-testid=\"button-join-lobby\"\n              >\n                {isJoining ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2\" />\n                    Joining Game...\n                  </>\n                ) : (\n                  <>\n                    <LogIn className=\"w-5 h-5 mr-2\" />\n                    Join Game\n                  </>\n                )}\n              </Button>\n            </form>\n\n            <Separator />\n\n            {/* Help Information */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-sm\">How to Join:</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-primary-foreground text-xs font-bold\">1</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get the lobby code from the game host\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gaming-player-highlight rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-white text-xs font-bold\">2</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Enter the code and choose your display name\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-gaming-success rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-white text-xs font-bold\">3</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Wait for the host to start the game\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Join Options */}\n            <div className=\"bg-muted/30 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Wifi className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Quick Join Tips</span>\n              </div>\n              <div className=\"space-y-1 text-xs text-muted-foreground\">\n                <p>• Lobby codes are case-insensitive</p>\n                <p>• Games need 4+ players to start</p>\n                <p>• You can change your name in the lobby</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Avatar Selector Dialog */}\n      {showAvatarSelector && (\n        <AvatarSelector\n          playerName={playerName || \"Player\"}\n          currentAvatar={avatar}\n          onAvatarChange={setAvatar}\n          onClose={() => setShowAvatarSelector(false)}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":10753},"client/src/components/LocalLobbyManager.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Plus, X, Users, Smartphone, ArrowRight, UserPlus } from \"lucide-react\";\n\ninterface LocalLobbyManagerProps {\n  onBack: () => void;\n  onStartGame: (players: string[]) => void;\n}\n\nexport default function LocalLobbyManager({ onBack, onStartGame }: LocalLobbyManagerProps) {\n  const [players, setPlayers] = useState<string[]>([]);\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n  const [isStarting, setIsStarting] = useState(false);\n\n  const addPlayer = () => {\n    if (newPlayerName.trim() && players.length < 10) {\n      setPlayers([...players, newPlayerName.trim()]);\n      setNewPlayerName(\"\");\n      console.log('Player added:', newPlayerName.trim());\n    }\n  };\n\n  const removePlayer = (index: number) => {\n    const removedPlayer = players[index];\n    setPlayers(players.filter((_, i) => i !== index));\n    console.log('Player removed:', removedPlayer);\n  };\n\n  const handleStartGame = () => {\n    setIsStarting(true);\n    console.log('Starting local game with players:', players);\n    setTimeout(() => {\n      onStartGame(players);\n    }, 1000);\n  };\n\n  const canStartGame = players.length >= 4;\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, x: -20 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: { duration: 0.4 }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 flex items-center justify-center p-4\">\n      <motion.div\n        className=\"w-full max-w-2xl\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <Card className=\"relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-gaming-player-highlight/10 to-primary/10\" />\n          \n          <CardHeader className=\"relative\">\n            <div className=\"flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-gaming-player-highlight/20 rounded-xl flex items-center justify-center\">\n                  <Smartphone className=\"w-5 h-5 text-gaming-player-highlight\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-xl font-gaming\">Local Game Setup</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Add players who will share this device\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"relative space-y-6\">\n            {/* Add Player Section */}\n            <motion.div variants={itemVariants} className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Add Players</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Enter player name...\"\n                  value={newPlayerName}\n                  onChange={(e) => setNewPlayerName(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && addPlayer()}\n                  maxLength={20}\n                  disabled={players.length >= 10}\n                  data-testid=\"input-new-player\"\n                  className=\"flex-1\"\n                />\n                <Button\n                  onClick={addPlayer}\n                  disabled={!newPlayerName.trim() || players.length >= 10}\n                  data-testid=\"button-add-player\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Minimum 4 players required, maximum 10 players\n              </p>\n            </motion.div>\n\n            <Separator />\n\n            {/* Players List */}\n            <motion.div variants={itemVariants} className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-base font-medium\">Players ({players.length}/10)</Label>\n                <Badge variant={canStartGame ? \"default\" : \"secondary\"}>\n                  {canStartGame ? \"Ready to Start\" : \"Need More Players\"}\n                </Badge>\n              </div>\n\n              {players.length === 0 ? (\n                <div className=\"border-2 border-dashed border-muted rounded-lg p-8 text-center\">\n                  <UserPlus className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No players added yet</p>\n                  <p className=\"text-sm text-muted-foreground\">Add at least 4 players to start</p>\n                </div>\n              ) : (\n                <div className=\"grid sm:grid-cols-2 gap-3\">\n                  {players.map((player, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, scale: 0.9 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.9 }}\n                      transition={{ duration: 0.2 }}\n                      className=\"flex items-center justify-between p-3 bg-card border rounded-lg hover-elevate\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-semibold text-primary\">\n                            {player.charAt(0).toUpperCase()}\n                          </span>\n                        </div>\n                        <span className=\"font-medium\" data-testid={`player-name-${index}`}>\n                          {player}\n                        </span>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removePlayer(index)}\n                        data-testid={`button-remove-${index}`}\n                        className=\"text-muted-foreground hover:text-gaming-danger\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </motion.div>\n                  ))}\n                </div>\n              )}\n            </motion.div>\n\n            <Separator />\n\n            {/* Game Instructions */}\n            <motion.div variants={itemVariants} className=\"space-y-3\">\n              <Label className=\"text-base font-medium\">How Local Mode Works</Label>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Players take turns using this device\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Each player receives their mission privately\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-gaming-success rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Pass the device when prompted\n                  </p>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Start Game Button */}\n            <motion.div variants={itemVariants}>\n              {canStartGame ? (\n                <Button\n                  onClick={handleStartGame}\n                  disabled={isStarting}\n                  className=\"w-full h-12 text-lg font-semibold\"\n                  data-testid=\"button-start-local-game\"\n                >\n                  {isStarting ? (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                      Starting Game...\n                    </div>\n                  ) : (\n                    <>\n                      <ArrowRight className=\"w-5 h-5 mr-2\" />\n                      Start Local Game\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <Button disabled className=\"w-full h-12\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Need {4 - players.length} More Players\n                </Button>\n              )}\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":9557},"client/src/components/MissionCard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Eye, EyeOff, Target, Clock, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MissionCardProps {\n  mission: {\n    id: string;\n    title: string;\n    description: string;\n    difficulty: 'easy' | 'medium' | 'hard';\n    category: string;\n    timeLimit?: number;\n  };\n  status: 'pending' | 'in-progress' | 'completed' | 'failed';\n  isRevealed?: boolean;\n  onComplete?: () => void;\n  onReveal?: () => void;\n}\n\nexport default function MissionCard({ \n  mission, \n  status, \n  isRevealed = false, \n  onComplete, \n  onReveal \n}: MissionCardProps) {\n  const [showDetails, setShowDetails] = useState(isRevealed);\n\n  const getDifficultyColor = () => {\n    switch (mission.difficulty) {\n      case 'easy': return 'bg-gaming-success';\n      case 'medium': return 'bg-gaming-warning';\n      case 'hard': return 'bg-gaming-danger';\n      default: return 'bg-muted';\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"w-4 h-4 text-gaming-success\" />;\n      case 'failed': return <AlertCircle className=\"w-4 h-4 text-gaming-danger\" />;\n      case 'in-progress': return <Clock className=\"w-4 h-4 text-gaming-warning animate-pulse\" />;\n      default: return <Target className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const handleReveal = () => {\n    setShowDetails(!showDetails);\n    console.log(`Mission ${showDetails ? 'hidden' : 'revealed'}`);\n    onReveal?.();\n  };\n\n  const handleComplete = () => {\n    console.log('Mission completed');\n    onComplete?.();\n  };\n\n  return (\n    <Card className={cn(\n      \"relative overflow-hidden transition-all duration-300\",\n      status === 'completed' && \"ring-2 ring-gaming-success\",\n      status === 'failed' && \"ring-2 ring-gaming-danger\",\n      status === 'in-progress' && \"ring-2 ring-gaming-warning\"\n    )}>\n      {/* Gradient Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-gaming-mission-card/20 via-transparent to-primary/5\" />\n      \n      <CardHeader className=\"relative\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            {getStatusIcon()}\n            <div>\n              <CardTitle className=\"text-lg font-gaming\">{mission.title}</CardTitle>\n              <div className=\"flex items-center gap-2 mt-2\">\n                <Badge \n                  variant=\"secondary\" \n                  className={cn(\"text-white text-xs\", getDifficultyColor())}\n                >\n                  {mission.difficulty}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {mission.category}\n                </Badge>\n                {mission.timeLimit && (\n                  <Badge variant=\"outline\" className=\"text-xs flex items-center gap-1\">\n                    <Clock className=\"w-3 h-3\" />\n                    {mission.timeLimit}m\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleReveal}\n            data-testid=\"button-reveal-mission\"\n            className=\"flex-shrink-0\"\n          >\n            {showDetails ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"relative\">\n        {showDetails ? (\n          <div className=\"space-y-4\">\n            <p className=\"text-foreground leading-relaxed\">\n              {mission.description}\n            </p>\n            \n            {status === 'in-progress' && (\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleComplete}\n                  className=\"flex-1\"\n                  data-testid=\"button-complete-mission\"\n                >\n                  Mark Complete\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={handleReveal}\n                  data-testid=\"button-hide-mission\"\n                >\n                  Hide Mission\n                </Button>\n              </div>\n            )}\n            \n            {status === 'pending' && (\n              <Button \n                onClick={() => console.log('Mission started')}\n                className=\"w-full\"\n                data-testid=\"button-start-mission\"\n              >\n                Start Mission\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <Eye className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">\n              Click the eye icon to reveal your secret mission\n            </p>\n          </div>\n        )}\n      </CardContent>\n\n      {/* Status Indicator Strip */}\n      {status !== 'pending' && (\n        <div className={cn(\n          \"absolute bottom-0 left-0 right-0 h-1\",\n          status === 'completed' && \"bg-gaming-success\",\n          status === 'failed' && \"bg-gaming-danger\",\n          status === 'in-progress' && \"bg-gaming-warning\"\n        )} />\n      )}\n    </Card>\n  );\n}","size_bytes":5428},"client/src/components/OnlineLobbyCreate.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ArrowLeft, Wifi, Crown, Settings, Users, Timer, Plus, Edit } from \"lucide-react\";\nimport AvatarSelector from \"./AvatarSelector\";\nimport { type AvatarConfig, createDefaultAvatar, SKIN_COLORS, FACE_OPTIONS, ACCESSORY_OPTIONS } from \"@/lib/avatarData\";\n\ninterface OnlineLobbyCreateProps {\n  onBack: () => void;\n  onCreateLobby: (hostName: string, settings: LobbySettings, avatar: AvatarConfig) => void;\n}\n\ninterface LobbySettings {\n  maxPlayers: number;\n  gameDuration: number;\n  allowSpectators: boolean;\n  specialFeatures: {\n    missionSwitching: boolean;\n    duoMissions: boolean;\n    noMissionPlayers: boolean;\n    timerVariations: boolean;\n    secretAlliances: boolean;\n  };\n}\n\nexport default function OnlineLobbyCreate({ onBack, onCreateLobby }: OnlineLobbyCreateProps) {\n  const [hostName, setHostName] = useState(\"\");\n  const [isCreating, setIsCreating] = useState(false);\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\n  const [avatar, setAvatar] = useState<AvatarConfig>(createDefaultAvatar(\"\"));\n  const [settings, setSettings] = useState<LobbySettings>({\n    maxPlayers: 8,\n    gameDuration: 20,\n    allowSpectators: true,\n    specialFeatures: {\n      missionSwitching: false,\n      duoMissions: false,\n      noMissionPlayers: false,\n      timerVariations: true,\n      secretAlliances: false,\n    }\n  });\n\n  const handleCreateLobby = () => {\n    if (hostName.trim()) {\n      setIsCreating(true);\n      console.log('Creating online lobby:', { hostName: hostName.trim(), settings, avatar });\n      setTimeout(() => {\n        onCreateLobby(hostName.trim(), settings, avatar);\n      }, 1500);\n    }\n  };\n\n  const updateSpecialFeature = (feature: keyof typeof settings.specialFeatures, value: boolean) => {\n    setSettings(prev => ({\n      ...prev,\n      specialFeatures: {\n        ...prev.specialFeatures,\n        [feature]: value\n      }\n    }));\n  };\n\n  const canCreate = hostName.trim().length >= 2;\n\n  const handleNameChange = (name: string) => {\n    setHostName(name);\n    if (avatar.type === 'initials') {\n      setAvatar(createDefaultAvatar(name));\n    }\n  };\n\n  const renderAvatarPreview = () => {\n    if (avatar.type === 'upload' || avatar.type === 'camera') {\n      return (\n        <Avatar className=\"w-20 h-20\">\n          <AvatarImage src={avatar.imageUrl} />\n          <AvatarFallback>{avatar.initials || hostName.substring(0, 2).toUpperCase()}</AvatarFallback>\n        </Avatar>\n      );\n    } else if (avatar.type === 'custom' && avatar.customData) {\n      const face = FACE_OPTIONS.find(f => f.id === avatar.customData!.face);\n      const skinColor = SKIN_COLORS.find(c => c.id === avatar.customData!.skinColor);\n      const accessories = avatar.customData!.accessories\n        .map(id => ACCESSORY_OPTIONS.find(a => a.id === id)?.emoji)\n        .filter(Boolean)\n        .join(' ');\n\n      return (\n        <div \n          className=\"w-20 h-20 rounded-full flex items-center justify-center text-5xl relative\"\n          style={{ backgroundColor: skinColor?.color }}\n        >\n          <span>{face?.emoji}</span>\n          {accessories && (\n            <div className=\"absolute -top-2 -right-2 text-2xl\">\n              {accessories}\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <Avatar className=\"w-20 h-20\">\n          <AvatarFallback className=\"bg-primary/20 text-primary text-3xl font-bold\">\n            {avatar.initials || hostName.substring(0, 2).toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n      );\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, x: -20 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: { duration: 0.4 }\n    }\n  };\n\n  const featureVariants = {\n    hidden: { opacity: 0, scale: 0.95 },\n    visible: { opacity: 1, scale: 1 }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 flex items-center justify-center p-4\">\n      <motion.div\n        className=\"w-full max-w-2xl\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <Card className=\"relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-gaming-player-highlight/10\" />\n          \n          <CardHeader className=\"relative\">\n            <div className=\"flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-primary/20 rounded-xl flex items-center justify-center\">\n                  <Wifi className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-xl font-gaming\">Create Online Lobby</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Set up a new game for remote players\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"relative space-y-6\">\n            {/* Avatar & Host Name */}\n            <motion.div variants={itemVariants} className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"relative\">\n                  {renderAvatarPreview()}\n                  <Button\n                    size=\"icon\"\n                    variant=\"secondary\"\n                    className=\"absolute -bottom-1 -right-1 w-8 h-8 rounded-full\"\n                    onClick={() => setShowAvatarSelector(true)}\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex-1 space-y-2\">\n                  <Label htmlFor=\"host-name\">Your Name (Host)</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"host-name\"\n                      placeholder=\"Enter your display name...\"\n                      value={hostName}\n                      onChange={(e) => handleNameChange(e.target.value)}\n                      maxLength={20}\n                      data-testid=\"input-host-name\"\n                      className=\"pl-10\"\n                    />\n                    <Crown className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gaming-warning\" />\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Click the edit button to customize your avatar\n              </p>\n            </motion.div>\n\n            <Separator />\n\n            {/* Basic Settings */}\n            <motion.div variants={itemVariants} className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Basic Settings</Label>\n              <div className=\"grid sm:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Max Players</Label>\n                  <Select \n                    value={settings.maxPlayers.toString()} \n                    onValueChange={(value) => setSettings(prev => ({ ...prev, maxPlayers: parseInt(value) }))}\n                  >\n                    <SelectTrigger data-testid=\"select-max-players\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"4\">4 Players</SelectItem>\n                      <SelectItem value=\"6\">6 Players</SelectItem>\n                      <SelectItem value=\"8\">8 Players</SelectItem>\n                      <SelectItem value=\"10\">10 Players</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Game Duration</Label>\n                  <Select \n                    value={settings.gameDuration.toString()} \n                    onValueChange={(value) => setSettings(prev => ({ ...prev, gameDuration: parseInt(value) }))}\n                  >\n                    <SelectTrigger data-testid=\"select-game-duration\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"10\">10 minutes</SelectItem>\n                      <SelectItem value=\"15\">15 minutes</SelectItem>\n                      <SelectItem value=\"20\">20 minutes</SelectItem>\n                      <SelectItem value=\"30\">30 minutes</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-card rounded-lg\">\n                <div className=\"space-y-1\">\n                  <Label>Allow Spectators</Label>\n                  <p className=\"text-xs text-muted-foreground\">Let others watch without playing</p>\n                </div>\n                <Switch\n                  checked={settings.allowSpectators}\n                  onCheckedChange={(checked) => setSettings(prev => ({ ...prev, allowSpectators: checked }))}\n                  data-testid=\"switch-allow-spectators\"\n                />\n              </div>\n            </motion.div>\n\n            <Separator />\n\n            {/* Special Features */}\n            <motion.div variants={itemVariants} className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <Settings className=\"w-4 h-4 text-primary\" />\n                <Label className=\"text-base font-medium\">Special Game Features</Label>\n                <Badge variant=\"outline\" className=\"text-xs\">Optional</Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Enable special gameplay mechanics to spice up your game\n              </p>\n\n              <div className=\"space-y-3\">\n                {[\n                  {\n                    key: 'missionSwitching' as const,\n                    title: 'Mission Switching',\n                    description: 'Players can swap missions with others during gameplay'\n                  },\n                  {\n                    key: 'duoMissions' as const,\n                    title: 'Duo Missions',\n                    description: 'Some missions require collaboration between two players'\n                  },\n                  {\n                    key: 'noMissionPlayers' as const,\n                    title: 'No Mission Players',\n                    description: 'Some players have no mission and must eliminate others'\n                  },\n                  {\n                    key: 'timerVariations' as const,\n                    title: 'Timer Variations',\n                    description: 'Dynamic time limits that change based on game events'\n                  },\n                  {\n                    key: 'secretAlliances' as const,\n                    title: 'Secret Alliances',\n                    description: 'Hidden team formations revealed during the game'\n                  }\n                ].map((feature) => (\n                  <motion.div\n                    key={feature.key}\n                    variants={featureVariants}\n                    className=\"flex items-center justify-between p-3 bg-card rounded-lg hover-elevate\"\n                  >\n                    <div className=\"space-y-1\">\n                      <Label>{feature.title}</Label>\n                      <p className=\"text-xs text-muted-foreground\">{feature.description}</p>\n                    </div>\n                    <Switch\n                      checked={settings.specialFeatures[feature.key]}\n                      onCheckedChange={(checked) => updateSpecialFeature(feature.key, checked)}\n                      data-testid={`switch-${feature.key.replace(/([A-Z])/g, '-$1').toLowerCase()}`}\n                    />\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n\n            <Separator />\n\n            {/* Create Lobby Button */}\n            <motion.div variants={itemVariants}>\n              {canCreate ? (\n                <Button\n                  onClick={handleCreateLobby}\n                  disabled={isCreating}\n                  className=\"w-full h-12 text-lg font-semibold\"\n                  data-testid=\"button-create-lobby\"\n                >\n                  {isCreating ? (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                      Creating Lobby...\n                    </div>\n                  ) : (\n                    <>\n                      <Plus className=\"w-5 h-5 mr-2\" />\n                      Create Lobby\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <Button disabled className=\"w-full h-12\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Enter Your Name to Continue\n                </Button>\n              )}\n            </motion.div>\n\n            {/* Preview */}\n            <motion.div variants={itemVariants} className=\"p-4 bg-gaming-mission-card/10 rounded-lg\">\n              <h4 className=\"font-semibold text-sm mb-2\">Game Preview:</h4>\n              <div className=\"text-xs text-muted-foreground space-y-1\">\n                <p>• {settings.maxPlayers} player maximum</p>\n                <p>• {settings.gameDuration} minute games</p>\n                <p>• {Object.values(settings.specialFeatures).filter(Boolean).length} special features enabled</p>\n                {settings.allowSpectators && <p>• Spectators welcome</p>}\n              </div>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Avatar Selector Dialog */}\n      {showAvatarSelector && (\n        <AvatarSelector\n          playerName={hostName || \"Player\"}\n          currentAvatar={avatar}\n          onAvatarChange={setAvatar}\n          onClose={() => setShowAvatarSelector(false)}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":15077},"client/src/components/OnlineModeSelector.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Plus, LogIn, Wifi } from \"lucide-react\";\n\ninterface OnlineModeSelectorProps {\n  onBack: () => void;\n  onSelectFlow: (flow: 'create' | 'join') => void;\n}\n\nexport default function OnlineModeSelector({ onBack, onSelectFlow }: OnlineModeSelectorProps) {\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        staggerChildren: 0.15\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.5 }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 flex items-center justify-center p-4\">\n      <motion.div\n        className=\"w-full max-w-4xl\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        {/* Header */}\n        <div className=\"mb-8 text-center\">\n          <Button\n            variant=\"ghost\"\n            onClick={onBack}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Mode Selection\n          </Button>\n          \n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"w-12 h-12 bg-primary/20 rounded-xl flex items-center justify-center\">\n              <Wifi className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl font-gaming font-bold\">Online Mode</h1>\n          </div>\n          <p className=\"text-muted-foreground text-lg\">\n            Play with friends anywhere. Choose how you want to start:\n          </p>\n        </div>\n\n        {/* Selection Cards */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Create Lobby Card */}\n          <motion.div variants={cardVariants}>\n            <Card className=\"relative overflow-hidden hover-elevate h-full cursor-pointer group\" onClick={() => onSelectFlow('create')}>\n              <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-gaming-player-highlight/5 group-hover:from-primary/20 group-hover:to-gaming-player-highlight/10 transition-all\" />\n              \n              <CardContent className=\"relative p-8 flex flex-col items-center text-center space-y-6 h-full\">\n                <div className=\"w-20 h-20 bg-primary/20 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <Plus className=\"w-10 h-10 text-primary\" />\n                </div>\n                \n                <div className=\"space-y-3 flex-1\">\n                  <h2 className=\"text-2xl font-gaming font-bold\">Create Lobby</h2>\n                  <p className=\"text-muted-foreground\">\n                    Start a new game and invite your friends\n                  </p>\n                  \n                  <div className=\"pt-4 space-y-2 text-sm text-muted-foreground text-left\">\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-success mt-1.5\" />\n                      <span>You'll be the host with full control</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-success mt-1.5\" />\n                      <span>Customize game settings and features</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-success mt-1.5\" />\n                      <span>Share a code with friends to join</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-success mt-1.5\" />\n                      <span>Start the game when everyone's ready</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <Button \n                  className=\"w-full h-12 text-lg font-semibold group-hover:scale-105 transition-transform\"\n                  onClick={() => onSelectFlow('create')}\n                >\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Create New Lobby\n                </Button>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Join Lobby Card */}\n          <motion.div variants={cardVariants}>\n            <Card className=\"relative overflow-hidden hover-elevate h-full cursor-pointer group\" onClick={() => onSelectFlow('join')}>\n              <div className=\"absolute inset-0 bg-gradient-to-br from-gaming-player-highlight/10 to-primary/5 group-hover:from-gaming-player-highlight/20 group-hover:to-primary/10 transition-all\" />\n              \n              <CardContent className=\"relative p-8 flex flex-col items-center text-center space-y-6 h-full\">\n                <div className=\"w-20 h-20 bg-gaming-player-highlight/20 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <LogIn className=\"w-10 h-10 text-gaming-player-highlight\" />\n                </div>\n                \n                <div className=\"space-y-3 flex-1\">\n                  <h2 className=\"text-2xl font-gaming font-bold\">Join Lobby</h2>\n                  <p className=\"text-muted-foreground\">\n                    Enter a code to join an existing game\n                  </p>\n                  \n                  <div className=\"pt-4 space-y-2 text-sm text-muted-foreground text-left\">\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-player-highlight mt-1.5\" />\n                      <span>Get the lobby code from your host</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-player-highlight mt-1.5\" />\n                      <span>Enter your display name</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-player-highlight mt-1.5\" />\n                      <span>Join instantly and see other players</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-gaming-player-highlight mt-1.5\" />\n                      <span>Wait for host to start the game</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <Button \n                  variant=\"secondary\"\n                  className=\"w-full h-12 text-lg font-semibold group-hover:scale-105 transition-transform\"\n                  onClick={() => onSelectFlow('join')}\n                >\n                  <LogIn className=\"w-5 h-5 mr-2\" />\n                  Join Existing Lobby\n                </Button>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Help Text */}\n        <motion.div \n          variants={cardVariants}\n          className=\"mt-8 text-center text-sm text-muted-foreground\"\n        >\n          <p>Need help? Make sure all players have a stable internet connection for the best experience.</p>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":7636},"client/src/components/PlayerAvatar.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Crown, Skull, CheckCircle, Clock, AlertTriangle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { type AvatarConfig, SKIN_COLORS, FACE_OPTIONS, ACCESSORY_OPTIONS } from \"@/lib/avatarData\";\n\ninterface PlayerAvatarProps {\n  id: string;\n  name: string;\n  avatar?: string;\n  avatarConfig?: AvatarConfig;\n  status: 'active' | 'eliminated' | 'completed' | 'host';\n  isCurrentPlayer?: boolean;\n  incorrectGuesses?: number;\n  maxIncorrectGuesses?: number;\n  onClick?: () => void;\n}\n\nexport default function PlayerAvatar({ \n  id, \n  name, \n  avatar, \n  avatarConfig,\n  status, \n  isCurrentPlayer = false,\n  incorrectGuesses = 0,\n  maxIncorrectGuesses = 3,\n  onClick \n}: PlayerAvatarProps) {\n  \n  const renderAvatar = () => {\n    // If avatarConfig is provided, render based on type\n    if (avatarConfig) {\n      if (avatarConfig.type === 'upload' || avatarConfig.type === 'camera') {\n        return (\n          <Avatar className=\"w-12 h-12\">\n            <AvatarImage src={avatarConfig.imageUrl} alt={name} />\n            <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n              {name.split(' ').map(n => n[0]).join('').toUpperCase()}\n            </AvatarFallback>\n          </Avatar>\n        );\n      } else if (avatarConfig.type === 'custom' && avatarConfig.customData) {\n        const face = FACE_OPTIONS.find(f => f.id === avatarConfig.customData!.face);\n        const skinColor = SKIN_COLORS.find(c => c.id === avatarConfig.customData!.skinColor);\n        const accessories = avatarConfig.customData!.accessories\n          .map(id => ACCESSORY_OPTIONS.find(a => a.id === id)?.emoji)\n          .filter(Boolean)\n          .join(' ');\n\n        return (\n          <div \n            className=\"w-12 h-12 rounded-full flex items-center justify-center text-2xl relative\"\n            style={{ backgroundColor: skinColor?.color }}\n          >\n            <span>{face?.emoji}</span>\n            {accessories && (\n              <div className=\"absolute -top-0.5 -right-0.5 text-xs\">\n                {accessories}\n              </div>\n            )}\n          </div>\n        );\n      } else {\n        // Initials type\n        return (\n          <Avatar className=\"w-12 h-12\">\n            <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n              {avatarConfig.initials || name.split(' ').map(n => n[0]).join('').toUpperCase()}\n            </AvatarFallback>\n          </Avatar>\n        );\n      }\n    }\n    \n    // Fallback to old avatar prop\n    return (\n      <Avatar className=\"w-12 h-12\">\n        <AvatarImage src={avatar} alt={name} />\n        <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n          {name.split(' ').map(n => n[0]).join('').toUpperCase()}\n        </AvatarFallback>\n      </Avatar>\n    );\n  };\n  \n  const getStatusColor = () => {\n    switch (status) {\n      case 'host': return 'ring-gaming-warning';\n      case 'active': return 'ring-gaming-player-highlight';\n      case 'completed': return 'ring-gaming-success';\n      case 'eliminated': return 'ring-gaming-danger';\n      default: return 'ring-muted';\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'host': return <Crown className=\"w-3 h-3\" />;\n      case 'completed': return <CheckCircle className=\"w-3 h-3\" />;\n      case 'eliminated': return <Skull className=\"w-3 h-3\" />;\n      case 'active': return <Clock className=\"w-3 h-3\" />;\n      default: return null;\n    }\n  };\n\n  const handleClick = () => {\n    console.log(`Player ${name} clicked`);\n    onClick?.();\n  };\n\n  return (\n    <Card \n      className={cn(\n        \"p-4 hover-elevate transition-all duration-200\",\n        isCurrentPlayer && \"bg-primary/5 border-primary\",\n        status === 'eliminated' && \"opacity-60 grayscale\",\n        onClick && \"cursor-pointer\"\n      )}\n      onClick={handleClick}\n      data-testid={`player-${id}`}\n    >\n      <div className=\"flex flex-col items-center space-y-3\">\n        {/* Avatar with Status Ring */}\n        <div className={cn(\"relative p-1 rounded-full ring-2\", getStatusColor())}>\n          {renderAvatar()}\n          \n          {/* Status Badge */}\n          {status === 'host' && (\n            <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-gaming-warning rounded-full flex items-center justify-center\">\n              <Crown className=\"w-3 h-3 text-white\" />\n            </div>\n          )}\n        </div>\n\n        {/* Player Name */}\n        <div className=\"text-center\">\n          <h4 className={cn(\n            \"font-semibold text-sm\",\n            status === 'eliminated' && \"line-through\"\n          )}>\n            {name}\n          </h4>\n          {isCurrentPlayer && (\n            <Badge variant=\"outline\" className=\"text-xs mt-1\">You</Badge>\n          )}\n        </div>\n\n        {/* Status Information */}\n        <div className=\"flex flex-col items-center space-y-1\">\n          {status !== 'eliminated' && incorrectGuesses > 0 && (\n            <div className=\"flex items-center gap-1\">\n              <AlertTriangle className=\"w-3 h-3 text-gaming-warning\" />\n              <span className=\"text-xs text-muted-foreground\">\n                {incorrectGuesses}/{maxIncorrectGuesses} wrong\n              </span>\n            </div>\n          )}\n          \n          <Badge \n            variant={status === 'active' ? 'secondary' : status === 'completed' ? 'default' : 'outline'}\n            className=\"text-xs flex items-center gap-1\"\n          >\n            {getStatusIcon()}\n            <span className=\"capitalize\">{status}</span>\n          </Badge>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":5769},"client/src/components/PlayerRosterForm.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Plus, X, Users, Smartphone, ArrowRight, UserPlus, Play } from \"lucide-react\";\n\ninterface PlayerRosterFormProps {\n  onBack: () => void;\n  onContinue: (players: string[]) => void;\n  title?: string;\n  subtitle?: string;\n}\n\nexport default function PlayerRosterForm({ \n  onBack, \n  onContinue, \n  title = \"Enter Player Names\",\n  subtitle = \"Add all players who will participate in this game\"\n}: PlayerRosterFormProps) {\n  const [players, setPlayers] = useState<string[]>([]);\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n\n  const addPlayer = () => {\n    if (newPlayerName.trim() && players.length < 10 && !players.includes(newPlayerName.trim())) {\n      setPlayers([...players, newPlayerName.trim()]);\n      setNewPlayerName(\"\");\n      console.log('Player added:', newPlayerName.trim());\n    }\n  };\n\n  const removePlayer = (index: number) => {\n    const removedPlayer = players[index];\n    setPlayers(players.filter((_, i) => i !== index));\n    console.log('Player removed:', removedPlayer);\n  };\n\n  const handleContinue = () => {\n    console.log('Continuing with players:', players);\n    onContinue(players);\n  };\n\n  const canContinue = players.length >= 4;\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, x: -20 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: { duration: 0.4 }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 flex items-center justify-center p-4\">\n      <motion.div\n        className=\"w-full max-w-2xl\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <Card className=\"relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-gaming-player-highlight/10 to-primary/10\" />\n          \n          <CardHeader className=\"relative\">\n            <div className=\"flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                data-testid=\"button-back-roster\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-gaming-player-highlight/20 rounded-xl flex items-center justify-center\">\n                  <Users className=\"w-5 h-5 text-gaming-player-highlight\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-xl font-gaming\">{title}</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {subtitle}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"relative space-y-6\">\n            {/* Add Player Section */}\n            <motion.div variants={itemVariants} className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Add Players</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Enter player name...\"\n                  value={newPlayerName}\n                  onChange={(e) => setNewPlayerName(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && addPlayer()}\n                  maxLength={20}\n                  disabled={players.length >= 10}\n                  data-testid=\"input-roster-player\"\n                  className=\"flex-1\"\n                />\n                <Button\n                  onClick={addPlayer}\n                  disabled={!newPlayerName.trim() || players.length >= 10 || players.includes(newPlayerName.trim())}\n                  data-testid=\"button-add-roster-player\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Minimum 4 players required, maximum 10 players. Names must be unique.\n              </p>\n            </motion.div>\n\n            <Separator />\n\n            {/* Players List */}\n            <motion.div variants={itemVariants} className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-base font-medium\">Players ({players.length}/10)</Label>\n                <Badge variant={canContinue ? \"default\" : \"secondary\"}>\n                  {canContinue ? \"Ready to Continue\" : \"Need More Players\"}\n                </Badge>\n              </div>\n\n              {players.length === 0 ? (\n                <div className=\"border-2 border-dashed border-muted rounded-lg p-8 text-center\">\n                  <UserPlus className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No players added yet</p>\n                  <p className=\"text-sm text-muted-foreground\">Add at least 4 players to continue</p>\n                </div>\n              ) : (\n                <div className=\"grid sm:grid-cols-2 gap-3\">\n                  {players.map((player, index) => (\n                    <motion.div\n                      key={`${player}-${index}`}\n                      initial={{ opacity: 0, scale: 0.9 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.9 }}\n                      transition={{ duration: 0.2 }}\n                      className=\"flex items-center justify-between p-3 bg-card border rounded-lg hover-elevate\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-semibold text-primary\">\n                            {player.charAt(0).toUpperCase()}\n                          </span>\n                        </div>\n                        <span className=\"font-medium\" data-testid={`roster-player-${index}`}>\n                          {player}\n                        </span>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removePlayer(index)}\n                        data-testid={`button-remove-roster-${index}`}\n                        className=\"text-muted-foreground hover:text-gaming-danger\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </motion.div>\n                  ))}\n                </div>\n              )}\n            </motion.div>\n\n            {/* Continue Button */}\n            <motion.div variants={itemVariants}>\n              {canContinue ? (\n                <Button\n                  onClick={handleContinue}\n                  className=\"w-full h-12 text-lg font-semibold\"\n                  data-testid=\"button-continue-roster\"\n                >\n                  <ArrowRight className=\"w-5 h-5 mr-2\" />\n                  Continue to Game Setup\n                </Button>\n              ) : (\n                <Button disabled className=\"w-full h-12\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Need {4 - players.length} More Players\n                </Button>\n              )}\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":7989},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [darkMode, setDarkMode] = useState(() => {\n    // Check if user has a theme preference in localStorage\n    const saved = localStorage.getItem('theme');\n    if (saved) {\n      return saved === 'dark';\n    }\n    // Default to system preference\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (darkMode) {\n      root.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      root.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n  }, [darkMode]);\n\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n    console.log('Theme toggled to:', !darkMode ? 'dark' : 'light');\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"w-10 h-10\"\n    >\n      {darkMode ? (\n        <Sun className=\"w-5 h-5 text-gaming-warning\" />\n      ) : (\n        <Moon className=\"w-5 h-5 text-primary\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1251},"client/src/components/TurnController.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Eye, EyeOff, ArrowRight, User, Shield, Clock, AlertTriangle } from \"lucide-react\";\n\ninterface TurnControllerProps {\n  currentPlayer: string;\n  currentPlayerIndex: number;\n  totalPlayers: number;\n  gamePhase: 'mission-viewing' | 'mission-entry' | 'gameplay' | 'guessing';\n  onPlayerReady: () => void;\n  onPassDevice: () => void;\n  showMissionContent?: boolean;\n  missionContent?: React.ReactNode;\n  timeRemaining?: number;\n}\n\nexport default function TurnController({\n  currentPlayer,\n  currentPlayerIndex,\n  totalPlayers,\n  gamePhase,\n  onPlayerReady,\n  onPassDevice,\n  showMissionContent = false,\n  missionContent,\n  timeRemaining\n}: TurnControllerProps) {\n  const [isReady, setIsReady] = useState(false);\n  const [privacyConfirmed, setPrivacyConfirmed] = useState(false);\n  const [showContent, setShowContent] = useState(false);\n\n  useEffect(() => {\n    setIsReady(false);\n    setPrivacyConfirmed(false);\n    setShowContent(false);\n  }, [currentPlayer]);\n\n  const handleConfirmPrivacy = () => {\n    setPrivacyConfirmed(true);\n    console.log(`Privacy confirmed for ${currentPlayer}`);\n  };\n\n  const handleRevealContent = () => {\n    setShowContent(true);\n    console.log(`Content revealed for ${currentPlayer}`);\n  };\n\n  const handlePlayerReady = () => {\n    setIsReady(true);\n    console.log(`${currentPlayer} is ready to pass device`);\n    onPlayerReady();\n  };\n\n  const handlePassDevice = () => {\n    console.log(`Passing device from ${currentPlayer}`);\n    onPassDevice();\n  };\n\n  const getPhaseTitle = () => {\n    switch (gamePhase) {\n      case 'mission-viewing': return 'View Your Mission';\n      case 'mission-entry': return 'Enter Mission Details';\n      case 'gameplay': return 'Your Turn';\n      case 'guessing': return 'Make Your Guess';\n      default: return 'Your Turn';\n    }\n  };\n\n  const getPhaseDescription = () => {\n    switch (gamePhase) {\n      case 'mission-viewing': return 'Review your secret mission privately';\n      case 'mission-entry': return 'Enter any required mission information';\n      case 'gameplay': return 'Take your action in the game';\n      case 'guessing': return 'Guess another player\\'s mission';\n      default: return 'Take your turn';\n    }\n  };\n\n  const overlayVariants = {\n    hidden: { opacity: 0 },\n    visible: { \n      opacity: 1,\n      transition: { duration: 0.3 }\n    },\n    exit: { \n      opacity: 0,\n      transition: { duration: 0.2 }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, scale: 0.9, y: 20 },\n    visible: { \n      opacity: 1, \n      scale: 1, \n      y: 0,\n      transition: { \n        duration: 0.4,\n        ease: \"easeOut\"\n      }\n    },\n    exit: { \n      opacity: 0, \n      scale: 0.95, \n      y: -10,\n      transition: { duration: 0.2 }\n    }\n  };\n\n  const pulseVariants = {\n    idle: { scale: 1 },\n    pulse: { \n      scale: 1.05,\n      transition: { \n        duration: 1,\n        repeat: Infinity,\n        repeatType: \"reverse\" as const\n      }\n    }\n  };\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n        variants={overlayVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        exit=\"exit\"\n        data-testid=\"turn-controller-overlay\"\n      >\n        <motion.div\n          className=\"w-full max-w-md\"\n          variants={cardVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n        >\n          <Card className=\"relative overflow-hidden border-2 border-gaming-player-highlight/30\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-gaming-player-highlight/10 via-primary/5 to-gaming-mission-card/10\" />\n            \n            <CardHeader className=\"relative text-center\">\n              <motion.div\n                className=\"w-16 h-16 bg-gaming-player-highlight/20 rounded-full flex items-center justify-center mx-auto mb-4\"\n                variants={pulseVariants}\n                animate=\"pulse\"\n              >\n                <User className=\"w-8 h-8 text-gaming-player-highlight\" />\n              </motion.div>\n              \n              <CardTitle className=\"text-xl font-gaming\">{getPhaseTitle()}</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {getPhaseDescription()}\n              </p>\n              \n              <div className=\"flex items-center justify-center gap-4 mt-4\">\n                <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                  <User className=\"w-3 h-3\" />\n                  {currentPlayer}\n                </Badge>\n                <Badge variant=\"secondary\">\n                  Turn {currentPlayerIndex + 1} of {totalPlayers}\n                </Badge>\n                {timeRemaining && (\n                  <Badge variant={timeRemaining <= 30 ? \"destructive\" : \"outline\"} className=\"flex items-center gap-1\">\n                    <Clock className=\"w-3 h-3\" />\n                    {Math.floor(timeRemaining / 60)}:{(timeRemaining % 60).toString().padStart(2, '0')}\n                  </Badge>\n                )}\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"relative space-y-4\">\n              {/* Privacy Instructions */}\n              {!privacyConfirmed && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"p-4 bg-gaming-warning/10 border border-gaming-warning/20 rounded-lg\"\n                >\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <Shield className=\"w-5 h-5 text-gaming-warning\" />\n                    <h4 className=\"font-semibold text-gaming-warning\">Privacy Check</h4>\n                  </div>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Make sure other players cannot see the screen</li>\n                    <li>• Look around to confirm privacy</li>\n                    <li>• Keep your mission secret</li>\n                  </ul>\n                  <Button\n                    onClick={handleConfirmPrivacy}\n                    className=\"w-full mt-3\"\n                    data-testid=\"button-confirm-privacy\"\n                  >\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    I'm Ready - Area is Private\n                  </Button>\n                </motion.div>\n              )}\n\n              {/* Mission Content Area */}\n              {privacyConfirmed && showMissionContent && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"space-y-4\"\n                >\n                  {!showContent ? (\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"p-6 border-2 border-dashed border-muted rounded-lg\">\n                        <EyeOff className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                        <p className=\"text-muted-foreground\">Your mission is hidden</p>\n                        <p className=\"text-sm text-muted-foreground\">Click below to reveal it</p>\n                      </div>\n                      <Button\n                        onClick={handleRevealContent}\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        data-testid=\"button-reveal-mission\"\n                      >\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        Reveal My Mission\n                      </Button>\n                    </div>\n                  ) : (\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.95 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {missionContent}\n                    </motion.div>\n                  )}\n                </motion.div>\n              )}\n\n              {/* Action Buttons */}\n              {privacyConfirmed && (!showMissionContent || showContent) && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"space-y-3\"\n                >\n                  <Separator />\n                  \n                  {!isReady ? (\n                    <Button\n                      onClick={handlePlayerReady}\n                      className=\"w-full h-12\"\n                      data-testid=\"button-player-ready\"\n                    >\n                      <ArrowRight className=\"w-4 h-4 mr-2\" />\n                      I'm Done - Ready to Pass Device\n                    </Button>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      <motion.div\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        className=\"p-3 bg-gaming-success/10 border border-gaming-success/20 rounded-lg text-center\"\n                      >\n                        <p className=\"text-sm text-gaming-success font-medium\">\n                          Ready to pass device to the next player\n                        </p>\n                      </motion.div>\n                      \n                      <Button\n                        onClick={handlePassDevice}\n                        variant=\"outline\"\n                        className=\"w-full h-12\"\n                        data-testid=\"button-pass-device\"\n                      >\n                        <ArrowRight className=\"w-4 h-4 mr-2\" />\n                        Pass Device to Next Player\n                      </Button>\n                    </div>\n                  )}\n                </motion.div>\n              )}\n\n              {/* Warning for Time */}\n              {timeRemaining && timeRemaining <= 30 && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"p-3 bg-gaming-danger/10 border border-gaming-danger/20 rounded-lg flex items-center gap-2\"\n                >\n                  <AlertTriangle className=\"w-4 h-4 text-gaming-danger animate-pulse\" />\n                  <p className=\"text-sm text-gaming-danger font-medium\">\n                    Time running out! Complete your turn quickly.\n                  </p>\n                </motion.div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","size_bytes":10951},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface WebSocketMessage {\n  event: string;\n  data?: any;\n  socketId?: string;\n}\n\nexport function useWebSocket(onMessage?: (message: WebSocketMessage) => void) {\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [socketId, setSocketId] = useState<string | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log('WebSocket connected');\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        \n        if (message.event === 'connected' && message.socketId) {\n          setSocketId(message.socketId);\n        }\n        \n        if (onMessage) {\n          onMessage(message);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket disconnected');\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [onMessage]);\n\n  const sendMessage = (event: string, data: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({ event, data }));\n    } else {\n      console.warn('WebSocket not connected');\n    }\n  };\n\n  return { isConnected, socketId, sendMessage };\n}\n","size_bytes":1781},"client/src/lib/avatarData.ts":{"content":"// Avatar customization data and types\n\nexport type AvatarType = 'initials' | 'upload' | 'camera' | 'custom';\n\nexport interface CustomAvatarData {\n  face: string;\n  skinColor: string;\n  accessories: string[];\n}\n\nexport interface AvatarConfig {\n  type: AvatarType;\n  imageUrl?: string; // For upload/camera\n  customData?: CustomAvatarData; // For custom builder\n  initials?: string; // For initials type\n}\n\n// Avatar customization options\nexport const FACE_OPTIONS = [\n  { id: 'happy', emoji: '😊', label: 'Happy' },\n  { id: 'cool', emoji: '😎', label: 'Cool' },\n  { id: 'silly', emoji: '🤪', label: 'Silly' },\n  { id: 'excited', emoji: '🤩', label: 'Excited' },\n  { id: 'nerdy', emoji: '🤓', label: 'Nerdy' },\n  { id: 'wink', emoji: '😉', label: 'Wink' },\n  { id: 'laughing', emoji: '😆', label: 'Laughing' },\n  { id: 'smirk', emoji: '😏', label: 'Smirk' },\n];\n\nexport const SKIN_COLORS = [\n  { id: 'light', color: '#FFE0BD', label: 'Light' },\n  { id: 'medium-light', color: '#F1C27D', label: 'Medium Light' },\n  { id: 'medium', color: '#E0AC69', label: 'Medium' },\n  { id: 'medium-dark', color: '#C68642', label: 'Medium Dark' },\n  { id: 'dark', color: '#8D5524', label: 'Dark' },\n  { id: 'very-dark', color: '#5C3317', label: 'Very Dark' },\n];\n\nexport const ACCESSORY_OPTIONS = [\n  { id: 'none', emoji: '', label: 'None' },\n  { id: 'hat', emoji: '🎩', label: 'Top Hat' },\n  { id: 'crown', emoji: '👑', label: 'Crown' },\n  { id: 'party', emoji: '🎉', label: 'Party' },\n  { id: 'glasses', emoji: '👓', label: 'Glasses' },\n  { id: 'headphones', emoji: '🎧', label: 'Headphones' },\n  { id: 'flower', emoji: '🌸', label: 'Flower' },\n  { id: 'star', emoji: '⭐', label: 'Star' },\n];\n\n// Helper function to generate initials\nexport function generateInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n}\n\n// Helper function to generate avatar URL from config\nexport function getAvatarUrl(config: AvatarConfig): string | undefined {\n  if (config.type === 'upload' || config.type === 'camera') {\n    return config.imageUrl;\n  }\n  return undefined;\n}\n\n// Helper function to create default avatar config\nexport function createDefaultAvatar(name: string): AvatarConfig {\n  return {\n    type: 'initials',\n    initials: generateInitials(name),\n  };\n}\n","size_bytes":2353},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ComponentShowcase.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Palette, Eye } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\n// Import all component examples\nimport GameModeSelectorExample from \"@/components/examples/GameModeSelector\";\nimport PlayerAvatarExample from \"@/components/examples/PlayerAvatar\";\nimport MissionCardExample from \"@/components/examples/MissionCard\";\nimport GameTimerExample from \"@/components/examples/GameTimer\";\nimport GuessInterfaceExample from \"@/components/examples/GuessInterface\";\nimport LobbyInterfaceExample from \"@/components/examples/LobbyInterface\";\nimport LobbyJoinExample from \"@/components/examples/LobbyJoin\";\nimport GameResultsExample from \"@/components/examples/GameResults\";\nimport ThemeToggleExample from \"@/components/examples/ThemeToggle\";\n\ninterface ComponentDemo {\n  id: string;\n  name: string;\n  description: string;\n  category: 'core' | 'ui' | 'game';\n  component: React.ComponentType;\n}\n\nconst componentDemos: ComponentDemo[] = [\n  {\n    id: 'game-mode-selector',\n    name: 'Game Mode Selector',\n    description: 'Choose between local and online game modes',\n    category: 'core',\n    component: GameModeSelectorExample\n  },\n  {\n    id: 'lobby-join',\n    name: 'Lobby Join',\n    description: 'Join an existing game lobby with code',\n    category: 'core',\n    component: LobbyJoinExample\n  },\n  {\n    id: 'lobby-interface',\n    name: 'Lobby Interface',\n    description: 'Complete lobby management with settings',\n    category: 'core',\n    component: LobbyInterfaceExample\n  },\n  {\n    id: 'mission-card',\n    name: 'Mission Card',\n    description: 'Display and interact with secret missions',\n    category: 'game',\n    component: MissionCardExample\n  },\n  {\n    id: 'guess-interface',\n    name: 'Guess Interface',\n    description: 'Guess other players\\' missions',\n    category: 'game',\n    component: GuessInterfaceExample\n  },\n  {\n    id: 'game-timer',\n    name: 'Game Timer',\n    description: 'Countdown timer with warnings',\n    category: 'game',\n    component: GameTimerExample\n  },\n  {\n    id: 'game-results',\n    name: 'Game Results',\n    description: 'End game statistics and winners',\n    category: 'game',\n    component: GameResultsExample\n  },\n  {\n    id: 'player-avatar',\n    name: 'Player Avatar',\n    description: 'Player status and information display',\n    category: 'ui',\n    component: PlayerAvatarExample\n  },\n  {\n    id: 'theme-toggle',\n    name: 'Theme Toggle',\n    description: 'Dark/light mode switcher',\n    category: 'ui',\n    component: ThemeToggleExample\n  }\n];\n\nexport default function ComponentShowcase() {\n  const [selectedComponent, setSelectedComponent] = useState<ComponentDemo | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<'all' | 'core' | 'ui' | 'game'>('all');\n\n  const filteredComponents = componentDemos.filter(comp => \n    selectedCategory === 'all' || comp.category === selectedCategory\n  );\n\n  const getCategoryColor = (category: ComponentDemo['category']) => {\n    switch (category) {\n      case 'core': return 'bg-primary text-primary-foreground';\n      case 'game': return 'bg-gaming-success text-white';\n      case 'ui': return 'bg-gaming-warning text-white';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  if (selectedComponent) {\n    const ComponentToRender = selectedComponent.component;\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"sticky top-0 z-40 bg-background/80 backdrop-blur border-b\">\n          <div className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setSelectedComponent(null)}\n                data-testid=\"button-back-showcase\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Showcase\n              </Button>\n              <div>\n                <h2 className=\"font-gaming font-semibold\">{selectedComponent.name}</h2>\n                <p className=\"text-sm text-muted-foreground\">{selectedComponent.description}</p>\n              </div>\n              <Badge className={getCategoryColor(selectedComponent.category)}>\n                {selectedComponent.category}\n              </Badge>\n            </div>\n          </div>\n        </div>\n        <ComponentToRender />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        \n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <Palette className=\"w-5 h-5 text-primary-foreground\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-2xl font-gaming\">Component Showcase</CardTitle>\n                  <p className=\"text-muted-foreground\">\n                    Interactive preview of all Secret Missions game components\n                  </p>\n                </div>\n              </div>\n              \n              <Link href=\"/\">\n                <Button variant=\"outline\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Game\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Category Filter */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-wrap gap-2\">\n              <Button \n                variant={selectedCategory === 'all' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory('all')}\n                data-testid=\"filter-all\"\n              >\n                All Components ({componentDemos.length})\n              </Button>\n              <Button \n                variant={selectedCategory === 'core' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory('core')}\n                data-testid=\"filter-core\"\n              >\n                Core ({componentDemos.filter(c => c.category === 'core').length})\n              </Button>\n              <Button \n                variant={selectedCategory === 'game' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory('game')}\n                data-testid=\"filter-game\"\n              >\n                Game ({componentDemos.filter(c => c.category === 'game').length})\n              </Button>\n              <Button \n                variant={selectedCategory === 'ui' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory('ui')}\n                data-testid=\"filter-ui\"\n              >\n                UI ({componentDemos.filter(c => c.category === 'ui').length})\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Component Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredComponents.map((demo) => (\n            <Card \n              key={demo.id} \n              className=\"hover-elevate cursor-pointer transition-all duration-200\"\n              onClick={() => setSelectedComponent(demo)}\n              data-testid={`component-card-${demo.id}`}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\">{demo.name}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {demo.description}\n                    </p>\n                  </div>\n                  <Badge className={getCategoryColor(demo.category)} variant=\"secondary\">\n                    {demo.category}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <Button variant=\"outline\" className=\"w-full\" size=\"sm\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  View Component\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Footer */}\n        <Card className=\"bg-gaming-mission-card/5\">\n          <CardContent className=\"p-6 text-center\">\n            <h3 className=\"font-gaming font-semibold mb-2\">Secret Missions Design System</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Built with modern React patterns, TypeScript, and Tailwind CSS.\n              Optimized for both mobile and desktop gameplay.\n            </p>\n            <div className=\"flex justify-center gap-4 text-xs text-muted-foreground\">\n              <span>🎨 Design-first approach</span>\n              <span>📱 Mobile responsive</span>\n              <span>🌙 Dark mode support</span>\n              <span>♿ Accessible components</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9399},"client/src/pages/GamePlay.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport type { Game, Player, Mission } from '@shared/schema';\nimport { Heart, Trophy, Clock, Eye, EyeOff } from 'lucide-react';\n\nexport function GamePlay() {\n  const [, setLocation] = useLocation();\n  const { gameId } = useParams<{ gameId: string }>();\n  const [game, setGame] = useState<Game | null>(null);\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [myMission, setMyMission] = useState<Mission | null>(null);\n  const [missionVisible, setMissionVisible] = useState(false);\n  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);\n  const [showEliminateDialog, setShowEliminateDialog] = useState(false);\n  const [showGuesserDialog, setShowGuesserDialog] = useState(false);\n  const [guessingPlayerId, setGuessingPlayerId] = useState<string>('');\n  const [timeRemaining, setTimeRemaining] = useState<number | null>(null);\n\n  const playerId = localStorage.getItem('currentPlayerId');\n  const currentPlayer = players.find(p => p.id === playerId);\n  const isHost = currentPlayer?.isHost || false;\n\n  const { sendMessage } = useWebSocket((message) => {\n    if (message.event === 'player_updated' || message.event === 'player_joined') {\n      fetchGameState();\n    }\n    if (message.event === 'game_ended') {\n      setLocation(`/game/${gameId}/results`);\n    }\n  });\n\n  useEffect(() => {\n    fetchGameState();\n    fetchMyMission();\n  }, [gameId]);\n\n  useEffect(() => {\n    if (game?.timerStartedAt && game?.timerDuration) {\n      const interval = setInterval(() => {\n        const startTime = new Date(game.timerStartedAt!).getTime();\n        const duration = game.timerDuration! * 60 * 1000;\n        const elapsed = Date.now() - startTime;\n        const remaining = Math.max(0, duration - elapsed);\n        \n        setTimeRemaining(Math.floor(remaining / 1000));\n        \n        if (remaining === 0 && isHost) {\n          endGame();\n        }\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [game, isHost]);\n\n  const fetchGameState = async () => {\n    try {\n      const response = await fetch(`/api/games/${gameId}`);\n      const data = await response.json();\n      setGame(data.game);\n      setPlayers(data.players);\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n    }\n  };\n\n  const fetchMyMission = async () => {\n    if (!playerId) return;\n    \n    try {\n      const response = await fetch(`/api/missions/player/${playerId}`);\n      const data = await response.json();\n      setMyMission(data.mission);\n    } catch (error) {\n      console.error('Error fetching mission:', error);\n    }\n  };\n\n  const handlePlayerAction = async (action: string, targetPlayer: Player) => {\n    setSelectedPlayer(targetPlayer);\n    \n    if (action === 'eliminate') {\n      setShowGuesserDialog(true);\n    } else {\n      await performAction(action, targetPlayer.id);\n    }\n  };\n\n  const performAction = async (action: string, targetPlayerId: string, guesser?: string) => {\n    try {\n      const response = await fetch(`/api/players/${targetPlayerId}/action`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action,\n          guessingPlayerId: guesser,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to perform action');\n      }\n\n      sendMessage('game_update', { gameId, action, playerId: targetPlayerId });\n      fetchGameState();\n      \n    } catch (error) {\n      console.error('Error performing action:', error);\n      alert('Failed to perform action');\n    }\n  };\n\n  const confirmElimination = async () => {\n    if (!selectedPlayer || !guessingPlayerId) return;\n    \n    await performAction('eliminate', selectedPlayer.id, guessingPlayerId);\n    setShowGuesserDialog(false);\n    setGuessingPlayerId('');\n    setSelectedPlayer(null);\n  };\n\n  const endGame = async () => {\n    try {\n      await fetch(`/api/games/${gameId}/end`, {\n        method: 'POST',\n      });\n      setLocation(`/game/${gameId}/results`);\n    } catch (error) {\n      console.error('Error ending game:', error);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (!game || !currentPlayer) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-4 py-4\">\n        {/* Timer and Game Info */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <Clock className=\"h-6 w-6 text-purple-600\" />\n                <div>\n                  <p className=\"text-sm text-gray-500\">Time Remaining</p>\n                  <p className=\"text-2xl font-bold\">\n                    {timeRemaining !== null ? formatTime(timeRemaining) : '--:--'}\n                  </p>\n                </div>\n              </div>\n              {isHost && (\n                <Button onClick={endGame} variant=\"destructive\">\n                  End Game\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* My Mission */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Your Mission</span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setMissionVisible(!missionVisible)}\n              >\n                {missionVisible ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {missionVisible && myMission ? (\n              <p className=\"text-lg\">{myMission.missionText}</p>\n            ) : (\n              <p className=\"text-gray-400 italic\">Click to reveal your mission</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Players */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Players</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {players.map((player) => (\n                <Card key={player.id} className={player.isEliminated ? 'opacity-50' : ''}>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-4xl\">{player.avatar}</span>\n                        <div>\n                          <p className=\"font-semibold text-lg\">{player.name}</p>\n                          {player.isHost && (\n                            <Badge variant=\"secondary\" className=\"mr-2\">Host</Badge>\n                          )}\n                          {player.isEliminated && (\n                            <Badge variant=\"destructive\">Eliminated</Badge>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col items-end gap-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Heart className=\"h-4 w-4 text-red-500\" />\n                          <span className=\"font-bold\">{player.lives}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Trophy className=\"h-4 w-4 text-yellow-500\" />\n                          <span className=\"font-bold\">{player.points}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {isHost && !player.isEliminated && player.id !== playerId && (\n                      <div className=\"flex gap-2 mt-4\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handlePlayerAction('eliminate', player)}\n                          className=\"flex-1\"\n                        >\n                          Eliminate\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handlePlayerAction('subtract_life', player)}\n                          className=\"flex-1\"\n                        >\n                          -1 Life\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"default\"\n                          onClick={() => handlePlayerAction('mission_completed', player)}\n                          className=\"flex-1\"\n                        >\n                          Completed\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Guesser Selection Dialog */}\n        <Dialog open={showGuesserDialog} onOpenChange={setShowGuesserDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Who Guessed Correctly?</DialogTitle>\n              <DialogDescription>\n                Select the player who correctly guessed {selectedPlayer?.name}'s mission\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <Select value={guessingPlayerId} onValueChange={setGuessingPlayerId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select player\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {players\n                    .filter(p => p.id !== selectedPlayer?.id && !p.isEliminated)\n                    .map(player => (\n                      <SelectItem key={player.id} value={player.id}>\n                        {player.avatar} {player.name}\n                      </SelectItem>\n                    ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowGuesserDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={confirmElimination} disabled={!guessingPlayerId}>\n                Confirm Elimination\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11465},"client/src/pages/GameResults.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Trophy, Medal, Award } from 'lucide-react';\nimport type { Player } from '@shared/schema';\n\nexport function GameResults() {\n  const [, setLocation] = useLocation();\n  const { gameId } = useParams<{ gameId: string }>();\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchResults();\n  }, [gameId]);\n\n  const fetchResults = async () => {\n    try {\n      const response = await fetch(`/api/games/${gameId}`);\n      const data = await response.json();\n      \n      // Sort players by points (descending)\n      const sortedPlayers = [...data.players].sort((a, b) => b.points - a.points);\n      setPlayers(sortedPlayers);\n    } catch (error) {\n      console.error('Error fetching results:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getPositionIcon = (index: number) => {\n    switch (index) {\n      case 0:\n        return <Trophy className=\"h-8 w-8 text-yellow-500\" />;\n      case 1:\n        return <Medal className=\"h-8 w-8 text-gray-400\" />;\n      case 2:\n        return <Award className=\"h-8 w-8 text-amber-600\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getPositionClass = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'bg-gradient-to-r from-yellow-100 to-amber-100 border-yellow-400';\n      case 1:\n        return 'bg-gradient-to-r from-gray-100 to-slate-100 border-gray-400';\n      case 2:\n        return 'bg-gradient-to-r from-amber-50 to-orange-50 border-amber-400';\n      default:\n        return 'bg-white border-gray-200';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center text-4xl\">Game Over!</CardTitle>\n          </CardHeader>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center text-2xl\">Final Scores</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {players.map((player, index) => (\n              <Card key={player.id} className={`border-2 ${getPositionClass(index)}`}>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-3xl font-bold text-gray-600\">\n                          #{index + 1}\n                        </span>\n                        {getPositionIcon(index)}\n                      </div>\n                      <span className=\"text-5xl\">{player.avatar}</span>\n                      <div>\n                        <p className=\"text-xl font-bold\">{player.name}</p>\n                        {player.isHost && (\n                          <p className=\"text-sm text-purple-600\">Host</p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-4xl font-bold text-purple-600\">\n                        {player.points}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">points</p>\n                    </div>\n                  </div>\n\n                  {player.isEliminated && (\n                    <div className=\"mt-3 text-sm text-red-600\">\n                      Mission discovered\n                    </div>\n                  )}\n                  {player.missionCompleted && (\n                    <div className=\"mt-3 text-sm text-green-600\">\n                      Mission completed ✓\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </CardContent>\n        </Card>\n\n        <div className=\"flex gap-4\">\n          <Button \n            onClick={() => setLocation('/')}\n            className=\"flex-1\"\n            size=\"lg\"\n          >\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4677},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport GameModeSelector from \"@/components/GameModeSelector\";\nimport LobbyJoin from \"@/components/LobbyJoin\";\nimport OnlineLobbyCreate from \"@/components/OnlineLobbyCreate\";\nimport OnlineModeSelector from \"@/components/OnlineModeSelector\";\nimport LocalLobbyManager from \"@/components/LocalLobbyManager\";\nimport LobbyInterface from \"@/components/LobbyInterface\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { type AvatarConfig } from \"@/lib/avatarData\";\n\ntype GameState = 'mode-select' | 'local-setup' | 'online-select' | 'online-create' | 'online-join' | 'lobby' | 'game';\ntype OnlineFlow = 'create' | 'join';\n\ninterface LobbySettings {\n  maxPlayers: number;\n  gameDuration: number;\n  allowSpectators: boolean;\n  specialFeatures: {\n    missionSwitching: boolean;\n    duoMissions: boolean;\n    noMissionPlayers: boolean;\n    timerVariations: boolean;\n    secretAlliances: boolean;\n  };\n}\n\nexport default function Home() {\n  const [gameState, setGameState] = useState<GameState>('mode-select');\n  const [gameMode, setGameMode] = useState<'local' | 'online' | null>(null);\n  const [onlineFlow, setOnlineFlow] = useState<OnlineFlow>('create');\n  const [players, setPlayers] = useState<string[]>([]);\n  const [lobbySettings, setLobbySettings] = useState<LobbySettings | null>(null);\n  const [playerAvatar, setPlayerAvatar] = useState<AvatarConfig | null>(null);\n  \n  // Mock lobby data for online mode\n  const mockOnlinePlayers = [\n    { id: '1', name: 'Alex Chen', status: 'host' as const },\n    { id: '2', name: 'You', status: 'active' as const },\n    { id: '3', name: 'Maria Garcia', status: 'active' as const },\n    { id: '4', name: 'John Smith', status: 'active' as const },\n  ];\n\n  const defaultSettings: LobbySettings = {\n    maxPlayers: 8,\n    gameDuration: 20,\n    allowSpectators: true,\n    specialFeatures: {\n      missionSwitching: false,\n      duoMissions: false,\n      noMissionPlayers: false,\n      timerVariations: true,\n      secretAlliances: false,\n    }\n  };\n\n  const handleModeSelect = (mode: 'local' | 'online') => {\n    setGameMode(mode);\n    console.log(`${mode} mode selected`);\n    \n    if (mode === 'local') {\n      setGameState('local-setup');\n    } else {\n      // For online mode, show the selection screen first\n      setGameState('online-select');\n    }\n  };\n\n  const handleOnlineFlowSelect = (flow: OnlineFlow) => {\n    setOnlineFlow(flow);\n    if (flow === 'create') {\n      setGameState('online-create');\n    } else {\n      setGameState('online-join');\n    }\n  };\n\n  const handleBackToModeSelect = () => {\n    setGameState('mode-select');\n    setGameMode(null);\n    setPlayers([]);\n    setLobbySettings(null);\n    setPlayerAvatar(null);\n  };\n\n  const handleBackToOnlineSelect = () => {\n    setGameState('online-select');\n  };\n\n  const handleOnlineCreateLobby = (hostName: string, settings: LobbySettings, avatar: AvatarConfig) => {\n    console.log('Creating online lobby:', { hostName, settings, avatar });\n    setLobbySettings(settings);\n    setPlayers([hostName]);\n    setPlayerAvatar(avatar);\n    setGameState('lobby');\n  };\n\n  const handleLocalPlayersReady = (playerList: string[]) => {\n    console.log('Local players ready:', playerList);\n    setPlayers(playerList);\n    setLobbySettings(defaultSettings);\n    setGameState('lobby');\n  };\n\n  const handleJoinLobby = (lobbyCode: string, playerName: string, avatar: AvatarConfig) => {\n    console.log('Joining lobby with:', { lobbyCode, playerName, avatar });\n    // Simulate successful join\n    setTimeout(() => {\n      setPlayers([playerName]);\n      setLobbySettings(defaultSettings);\n      setPlayerAvatar(avatar);\n      setGameState('lobby');\n    }, 1000);\n  };\n\n  const handleStartGame = () => {\n    console.log('Starting game with players:', players);\n    setGameState('game');\n  };\n\n  // Create players data for lobby interface\n  const getLobbyPlayers = () => {\n    if (gameMode === 'local') {\n      return players.map((name, index) => ({\n        id: `local-${index}`,\n        name,\n        status: index === 0 ? 'host' as const : 'active' as const\n      }));\n    } else {\n      // For online mode, use actual player data with avatar config\n      return players.map((name, index) => ({\n        id: `online-${index}`,\n        name,\n        status: index === 0 ? 'host' as const : 'active' as const,\n        avatarConfig: index === 0 ? playerAvatar || undefined : undefined\n      }));\n    }\n  };\n\n  const renderCurrentState = () => {\n    const currentKey = `${gameState}-${gameMode}-${onlineFlow}`;\n    \n    switch (gameState) {\n      case 'mode-select':\n        return (\n          <GameModeSelector \n            key=\"mode-select\"\n            onSelectMode={handleModeSelect} \n          />\n        );\n        \n      case 'local-setup':\n        return (\n          <LocalLobbyManager\n            key=\"local-setup\"\n            onBack={handleBackToModeSelect}\n            onStartGame={handleLocalPlayersReady}\n          />\n        );\n        \n      case 'online-select':\n        return (\n          <OnlineModeSelector\n            key=\"online-select\"\n            onBack={handleBackToModeSelect}\n            onSelectFlow={handleOnlineFlowSelect}\n          />\n        );\n        \n      case 'online-create':\n        return (\n          <OnlineLobbyCreate\n            key=\"online-create\"\n            onBack={handleBackToOnlineSelect}\n            onCreateLobby={handleOnlineCreateLobby}\n          />\n        );\n        \n      case 'online-join':\n        return (\n          <LobbyJoin\n            key=\"online-join\"\n            onJoinLobby={handleJoinLobby}\n            onBack={handleBackToOnlineSelect}\n          />\n        );\n        \n      case 'lobby':\n        return (\n          <LobbyInterface\n            key={`lobby-${gameMode}`}\n            lobbyCode={gameMode === 'online' ? \"DEMO123\" : \"LOCAL\"}\n            isHost={true}\n            players={getLobbyPlayers()}\n            gameSettings={lobbySettings || defaultSettings}\n            gameMode={gameMode || 'local'}\n            onStartGame={handleStartGame}\n            onUpdateSettings={setLobbySettings}\n          />\n        );\n        \n      case 'game':\n        return (\n          <div key=\"game\" className=\"min-h-screen bg-gradient-to-br from-background to-primary/5 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <h1 className=\"text-4xl font-gaming font-bold mb-4\">Game Started!</h1>\n              <p className=\"text-muted-foreground\">Game implementation coming soon...</p>\n              <button \n                onClick={handleBackToModeSelect}\n                className=\"mt-4 px-4 py-2 bg-primary text-primary-foreground rounded\"\n              >\n                Back to Home\n              </button>\n            </div>\n          </div>\n        );\n        \n      default:\n        return <GameModeSelector key=\"default\" onSelectMode={handleModeSelect} />;\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Theme Toggle - Fixed position */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <ThemeToggle />\n      </div>\n      \n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={gameState}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n          transition={{ duration: 0.4, ease: \"easeInOut\" }}\n        >\n          {renderCurrentState()}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":7507},"client/src/pages/JoinGame.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useWebSocket } from '@/hooks/useWebSocket';\n\nexport function JoinGame() {\n  const [, setLocation] = useLocation();\n  const [roomCode, setRoomCode] = useState('');\n  const [playerName, setPlayerName] = useState('');\n  const [selectedAvatar, setSelectedAvatar] = useState('🎮');\n  const [isJoining, setIsJoining] = useState(false);\n  const [error, setError] = useState('');\n\n  const { isConnected, sendMessage } = useWebSocket((message) => {\n    if (message.event === 'missions_distributed') {\n      const gameId = localStorage.getItem('currentGameId');\n      if (gameId) {\n        setLocation(`/game/${gameId}/play`);\n      }\n    }\n  });\n\n  const joinGame = async () => {\n    if (!playerName.trim()) {\n      setError('Please enter your name');\n      return;\n    }\n\n    if (!roomCode.trim() || roomCode.length !== 6) {\n      setError('Please enter a valid 6-digit room code');\n      return;\n    }\n\n    setIsJoining(true);\n    setError('');\n\n    try {\n      const response = await fetch('/api/games/join', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          roomCode: roomCode.toUpperCase(),\n          playerName,\n          playerAvatar: selectedAvatar,\n        }),\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.error || 'Failed to join game');\n      }\n\n      const data = await response.json();\n      \n      // Store game info and register with WebSocket\n      localStorage.setItem('currentGameId', data.game.id);\n      localStorage.setItem('currentPlayerId', data.player.id);\n      sendMessage('register_player', { playerId: data.player.id });\n      \n      // Navigate to mission entry\n      setLocation(`/game/${data.game.id}/missions`);\n      \n    } catch (error) {\n      console.error('Error joining game:', error);\n      setError(error instanceof Error ? error.message : 'Failed to join game');\n    } finally {\n      setIsJoining(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Join Game</CardTitle>\n          <CardDescription>\n            Enter the 6-digit room code to join a game\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"roomCode\">Room Code</Label>\n            <Input\n              id=\"roomCode\"\n              placeholder=\"Enter 6-digit code\"\n              value={roomCode}\n              onChange={(e) => setRoomCode(e.target.value.toUpperCase())}\n              maxLength={6}\n              className=\"text-center text-2xl font-mono tracking-wider\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Your Name</Label>\n            <Input\n              id=\"name\"\n              placeholder=\"Enter your name\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Choose Your Avatar</Label>\n            <div className=\"grid grid-cols-6 gap-2\">\n              {['🎮', '👾', '🎯', '🎲', '🎪', '🎭', '🎨', '🎬', '🎸', '🎹', '🎤', '🎧'].map((emoji) => (\n                <button\n                  key={emoji}\n                  type=\"button\"\n                  onClick={() => setSelectedAvatar(emoji)}\n                  className={`text-3xl p-2 rounded border-2 transition ${\n                    selectedAvatar === emoji\n                      ? 'border-purple-500 bg-purple-100'\n                      : 'border-gray-300 hover:border-purple-300'\n                  }`}\n                >\n                  {emoji}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"text-sm text-red-500 text-center p-2 bg-red-50 rounded\">\n              {error}\n            </div>\n          )}\n\n          <Button \n            onClick={joinGame} \n            disabled={isJoining || !isConnected}\n            className=\"w-full\"\n          >\n            {isJoining ? 'Joining...' : 'Join Game'}\n          </Button>\n\n          {!isConnected && (\n            <p className=\"text-sm text-center text-red-500\">\n              Connecting to server...\n            </p>\n          )}\n\n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation('/')}\n            className=\"w-full\"\n          >\n            Back to Home\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5049},"client/src/pages/MissionEntry.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useWebSocket } from '@/hooks/useWebSocket';\n\nexport function MissionEntry() {\n  const [, setLocation] = useLocation();\n  const { gameId } = useParams<{ gameId: string }>();\n  const [missionText, setMissionText] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n\n  const { sendMessage } = useWebSocket((message) => {\n    if (message.event === 'missions_distributed') {\n      setLocation(`/game/${gameId}/play`);\n    }\n  });\n\n  const submitMission = async () => {\n    if (!missionText.trim()) {\n      alert('Please enter a mission');\n      return;\n    }\n\n    const playerId = localStorage.getItem('currentPlayerId');\n    if (!playerId) {\n      alert('Player ID not found');\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch('/api/missions/submit', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          gameId,\n          playerId,\n          missionText: missionText.trim(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to submit mission');\n      }\n\n      setHasSubmitted(true);\n      \n    } catch (error) {\n      console.error('Error submitting mission:', error);\n      alert('Failed to submit mission');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (hasSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-center\">Mission Submitted!</CardTitle>\n            <CardDescription className=\"text-center\">\n              Waiting for other players to submit their missions...\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex justify-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <CardTitle>Enter Your Mission</CardTitle>\n          <CardDescription>\n            Create a mission for another player to complete. Be creative but make it achievable!\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"mission\">Your Mission</Label>\n            <Textarea\n              id=\"mission\"\n              placeholder=\"Example: Make everyone laugh at least once, Compliment 3 different people, etc.\"\n              value={missionText}\n              onChange={(e) => setMissionText(e.target.value)}\n              rows={5}\n              className=\"resize-none\"\n            />\n            <p className=\"text-sm text-gray-500\">\n              {missionText.length} characters\n            </p>\n          </div>\n\n          <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n            <h4 className=\"font-semibold text-purple-900 mb-2\">Mission Tips:</h4>\n            <ul className=\"text-sm text-purple-800 space-y-1\">\n              <li>• Keep it fun and appropriate</li>\n              <li>• Make it observable so others can verify</li>\n              <li>• Don't make it too obvious</li>\n              <li>• Consider the game duration</li>\n            </ul>\n          </div>\n\n          <Button \n            onClick={submitMission} \n            disabled={isSubmitting || !missionText.trim()}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {isSubmitting ? 'Submitting...' : 'Submit Mission'}\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4344},"client/src/pages/OnlineGame.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport type { Game, Player } from '@shared/schema';\n\nexport function OnlineGameLobby() {\n  const [, setLocation] = useLocation();\n  const [playerName, setPlayerName] = useState('');\n  const [selectedAvatar, setSelectedAvatar] = useState('🎮');\n  const [gameData, setGameData] = useState<{ game: Game; player: Player } | null>(null);\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [isCreating, setIsCreating] = useState(false);\n  \n  const { isConnected, sendMessage } = useWebSocket((message) => {\n    if (message.event === 'player_joined' && gameData) {\n      fetchGameState(gameData.game.id);\n    }\n    if (message.event === 'missions_distributed' && gameData) {\n      setLocation(`/game/${gameData.game.id}/play`);\n    }\n  });\n\n  const fetchGameState = async (gameId: string) => {\n    try {\n      const response = await fetch(`/api/games/${gameId}`);\n      const data = await response.json();\n      setPlayers(data.players);\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n    }\n  };\n\n  const createGame = async () => {\n    if (!playerName.trim()) {\n      alert('Please enter your name');\n      return;\n    }\n\n    setIsCreating(true);\n    try {\n      const response = await fetch('/api/games/create', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          mode: 'online',\n          hostName: playerName,\n          hostAvatar: selectedAvatar,\n          timerDuration: 30,\n        }),\n      });\n\n      const data = await response.json();\n      setGameData(data);\n      setPlayers([data.player]);\n      \n      // Store game info in localStorage\n      localStorage.setItem('currentGameId', data.game.id);\n      localStorage.setItem('currentPlayerId', data.player.id);\n      \n      // Register with WebSocket\n      sendMessage('register_player', { playerId: data.player.id });\n      \n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Failed to create game');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const startGame = () => {\n    if (gameData) {\n      setLocation(`/game/${gameData.game.id}/missions`);\n    }\n  };\n\n  if (!gameData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Create Online Game</CardTitle>\n            <CardDescription>\n              Host a game and invite friends with a room code\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Your Name</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"Enter your name\"\n                value={playerName}\n                onChange={(e) => setPlayerName(e.target.value)}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Choose Your Avatar</Label>\n              <div className=\"grid grid-cols-6 gap-2\">\n                {['🎮', '👾', '🎯', '🎲', '🎪', '🎭', '🎨', '🎬', '🎸', '🎹', '🎤', '🎧'].map((emoji) => (\n                  <button\n                    key={emoji}\n                    type=\"button\"\n                    onClick={() => setSelectedAvatar(emoji)}\n                    className={`text-3xl p-2 rounded border-2 transition ${\n                      selectedAvatar === emoji\n                        ? 'border-purple-500 bg-purple-100'\n                        : 'border-gray-300 hover:border-purple-300'\n                    }`}\n                  >\n                    {emoji}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <Button \n              onClick={createGame} \n              disabled={isCreating || !isConnected}\n              className=\"w-full\"\n            >\n              {isCreating ? 'Creating...' : 'Create Game Room'}\n            </Button>\n\n            {!isConnected && (\n              <p className=\"text-sm text-center text-red-500\">\n                Connecting to server...\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center text-3xl\">Game Room</CardTitle>\n            <CardDescription className=\"text-center text-xl font-mono\">\n              Room Code: <span className=\"text-purple-500 font-bold\">{gameData.game.roomCode}</span>\n            </CardDescription>\n            <p className=\"text-center text-sm text-gray-500\">\n              Share this code with your friends to join\n            </p>\n          </CardHeader>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Players ({players.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              {players.map((player) => (\n                <div\n                  key={player.id}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-slate-100 border\"\n                >\n                  <span className=\"text-3xl\">{player.avatar}</span>\n                  <div>\n                    <p className=\"font-semibold\">{player.name}</p>\n                    {player.isHost && (\n                      <p className=\"text-xs text-purple-600\">Host</p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {gameData.player.isHost && (\n          <Button \n            onClick={startGame}\n            disabled={players.length < 2}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {players.length < 2 ? 'Waiting for players...' : 'Start Game'}\n          </Button>\n        )}\n\n        {!gameData.player.isHost && (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <p className=\"text-center text-gray-600\">\n                Waiting for host to start the game...\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6791},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/GameModeSelector.tsx":{"content":"import GameModeSelector from '../GameModeSelector';\n\nexport default function GameModeSelectorExample() {\n  return (\n    <GameModeSelector \n      onSelectMode={(mode) => console.log('Selected mode:', mode)} \n    />\n  );\n}","size_bytes":220},"client/src/components/examples/GameResults.tsx":{"content":"import GameResults from '../GameResults';\n\nexport default function GameResultsExample() {\n  const sampleStats = {\n    duration: 1234, // ~20 minutes\n    totalPlayers: 6,\n    missionsCompleted: 2,\n    totalGuesses: 8,\n    correctGuesses: 3\n  };\n\n  const samplePlayers = [\n    {\n      id: '1',\n      name: 'Alex Chen',\n      result: 'winner' as const,\n      mission: 'Make someone laugh without being obvious about it',\n      completedMission: true,\n      correctGuesses: 2,\n      incorrectGuesses: 1\n    },\n    {\n      id: '2',\n      name: 'Maria Garcia',\n      result: 'survivor' as const,\n      mission: 'Compliment someone\\'s clothing choice',\n      completedMission: false,\n      correctGuesses: 1,\n      incorrectGuesses: 2\n    },\n    {\n      id: '3',\n      name: 'John Smith',\n      result: 'eliminated' as const,\n      mission: 'Ask everyone about the weather',\n      completedMission: false,\n      correctGuesses: 0,\n      incorrectGuesses: 3\n    }\n  ];\n\n  return (\n    <GameResults \n      gameStats={sampleStats}\n      players={samplePlayers}\n      winCondition=\"mission-complete\"\n      onPlayAgain={() => console.log('Play again clicked')}\n      onReturnToMenu={() => console.log('Return to menu clicked')}\n    />\n  );\n}","size_bytes":1229},"client/src/components/examples/GameTimer.tsx":{"content":"import GameTimer from '../GameTimer';\n\nexport default function GameTimerExample() {\n  return (\n    <div className=\"p-8 max-w-sm mx-auto bg-background\">\n      <GameTimer \n        initialTime={300} // 5 minutes\n        isRunning={false}\n        warningThreshold={60}\n        onTimeUp={() => console.log('Game time is up!')}\n        onToggle={(running) => console.log('Timer toggled:', running)}\n      />\n    </div>\n  );\n}","size_bytes":419},"client/src/components/examples/GuessInterface.tsx":{"content":"import GuessInterface from '../GuessInterface';\n\nexport default function GuessInterfaceExample() {\n  const samplePlayers = [\n    { id: '1', name: 'Alex Chen', status: 'host' as const },\n    { id: '2', name: 'Maria Garcia', status: 'active' as const },\n    { id: '3', name: 'John Smith', status: 'completed' as const },\n    { id: '4', name: 'Sarah Wilson', status: 'active' as const },\n    { id: '5', name: 'Mike Johnson', status: 'eliminated' as const },\n  ];\n\n  return (\n    <div className=\"p-8 max-w-2xl mx-auto bg-background\">\n      <GuessInterface \n        players={samplePlayers}\n        currentPlayerId=\"1\"\n        incorrectGuesses={1}\n        maxIncorrectGuesses={3}\n        onSubmitGuess={(playerId, mission) => \n          console.log('Guess submitted:', { playerId, mission })\n        }\n      />\n    </div>\n  );\n}","size_bytes":822},"client/src/components/examples/LobbyInterface.tsx":{"content":"import LobbyInterface from '../LobbyInterface';\n\nexport default function LobbyInterfaceExample() {\n  const samplePlayers = [\n    { id: '1', name: 'Alex Chen', status: 'host' as const },\n    { id: '2', name: 'Maria Garcia', status: 'active' as const },\n    { id: '3', name: 'John Smith', status: 'active' as const },\n    { id: '4', name: 'Sarah Wilson', status: 'active' as const },\n  ];\n\n  const sampleSettings = {\n    maxPlayers: 8,\n    gameDuration: 20,\n    allowSpectators: true,\n    specialFeatures: {\n      missionSwitching: true,\n      duoMissions: false,\n      noMissionPlayers: true,\n      timerVariations: false,\n      secretAlliances: true\n    }\n  };\n\n  return (\n    <LobbyInterface \n      lobbyCode=\"GAME123\"\n      isHost={true}\n      players={samplePlayers}\n      gameSettings={sampleSettings}\n      onUpdateSettings={(settings) => console.log('Settings updated:', settings)}\n      onStartGame={() => console.log('Game started!')}\n      onKickPlayer={(playerId) => console.log('Kick player:', playerId)}\n    />\n  );\n}","size_bytes":1029},"client/src/components/examples/LobbyJoin.tsx":{"content":"import LobbyJoin from '../LobbyJoin';\n\nexport default function LobbyJoinExample() {\n  return (\n    <LobbyJoin \n      onJoinLobby={(code, name) => console.log('Joining lobby:', { code, name })}\n      onBack={() => console.log('Going back')}\n      isJoining={false}\n      error=\"\"\n    />\n  );\n}","size_bytes":292},"client/src/components/examples/MissionCard.tsx":{"content":"import MissionCard from '../MissionCard';\n\nexport default function MissionCardExample() {\n  const sampleMission = {\n    id: '1',\n    title: 'The Subtle Compliment',\n    description: 'Give someone a genuine compliment about their choice of clothing without making it obvious that this is your mission. The compliment must feel natural and be accepted graciously.',\n    difficulty: 'medium' as const,\n    category: 'Social',\n    timeLimit: 10\n  };\n\n  return (\n    <div className=\"p-8 max-w-md mx-auto bg-background\">\n      <MissionCard \n        mission={sampleMission}\n        status=\"in-progress\"\n        isRevealed={true}\n        onComplete={() => console.log('Mission completed!')}\n        onReveal={() => console.log('Mission visibility toggled')}\n      />\n    </div>\n  );\n}","size_bytes":776},"client/src/components/examples/PlayerAvatar.tsx":{"content":"import PlayerAvatar from '../PlayerAvatar';\n\nexport default function PlayerAvatarExample() {\n  return (\n    <div className=\"p-8 grid grid-cols-2 md:grid-cols-4 gap-4 bg-background\">\n      <PlayerAvatar \n        id=\"1\"\n        name=\"Alex Chen\"\n        status=\"host\"\n        isCurrentPlayer={true}\n        onClick={() => console.log('Clicked Alex')}\n      />\n      <PlayerAvatar \n        id=\"2\"\n        name=\"Maria Garcia\"\n        status=\"active\"\n        incorrectGuesses={1}\n        onClick={() => console.log('Clicked Maria')}\n      />\n      <PlayerAvatar \n        id=\"3\"\n        name=\"John Smith\"\n        status=\"completed\"\n        onClick={() => console.log('Clicked John')}\n      />\n      <PlayerAvatar \n        id=\"4\"\n        name=\"Sarah Wilson\"\n        status=\"eliminated\"\n        incorrectGuesses={3}\n        onClick={() => console.log('Clicked Sarah')}\n      />\n    </div>\n  );\n}","size_bytes":886},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-8 bg-background\">\n      <div className=\"flex items-center gap-4\">\n        <span className=\"text-foreground\">Toggle theme:</span>\n        <ThemeToggle />\n      </div>\n    </div>\n  );\n}","size_bytes":306},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}